===== app.js =====
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const dotenv = require('dotenv');
const swaggerJsDoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');

// Konfiguracja zmiennych środowiskowych
dotenv.config();

// Import tras
const authRoutes = require('./routes/authRoutes');
const userRoutes = require('./routes/userRoutes');
// Pozostałe trasy można dodać później

// Import middleware
const { defaultLimiter } = require('./middleware/rateLimiter');
const { errorHandler, notFoundHandler } = require('./middleware/errorHandler');

// Inicjalizacja aplikacji Express
const app = express();
app.set("trust proxy", 1);  // Zaufaj proxy Nginx

// Konfiguracja Swagger
const swaggerOptions = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'AmicusApp API',
      version: '1.0.0',
      description: 'API dla aplikacji AmicusApp do zarządzania inseminacją i hodowlą',
    },
    servers: [
      {
        url: `http://localhost:${process.env.PORT || 4000}`,
        description: 'Serwer deweloperski',
      },
    ],
    components: {
      securitySchemes: {
        bearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
        },
      },
    },
  },
  apis: ['./routes/*.js'],
};

const swaggerDocs = swaggerJsDoc(swaggerOptions);

// Middleware
app.use(cors()); // Pozwala na żądania CORS
app.use(helmet()); // Zabezpieczenia nagłówków HTTP
app.use(express.json()); // Parsowanie JSON w ciele żądania
app.use(express.urlencoded({ extended: true })); // Parsowanie danych formularzy

// Aplikowanie limitera domyślnego
app.use(defaultLimiter);

// Trasy API
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
// Pozostałe trasy można dodać później

// Dokumentacja Swagger
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs));

// Obsługa nieznanych tras
app.use(notFoundHandler);

// Obsługa błędów
app.use(errorHandler);

// Ustawienia portu i uruchomienie serwera
const PORT = process.env.PORT || 4000;

module.exports = app;

===== auth-diagnosis.js =====
require('dotenv').config();
const { pool } = require('./config/db');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

async function diagnoseAuth() {
  try {
    console.log('==== DIAGNOZA PROBLEMU LOGOWANIA ====');
    console.log('Sprawdzam zmienne środowiskowe:');
    console.log('JWT_SECRET ustawiony?', !!process.env.JWT_SECRET);
    if (!process.env.JWT_SECRET) {
      console.log('⚠️ UWAGA: Brak JWT_SECRET w zmiennych środowiskowych!');
      console.log('Tworzę tymczasowy plik .env z JWT_SECRET');
      
      const fs = require('fs');
      fs.writeFileSync('.env', 'JWT_SECRET=amicus_secret_key_123\nJWT_EXPIRES_IN=7d\n');
      require('dotenv').config(); // Przeładuj zmienne środowiskowe
      console.log('JWT_SECRET ustawiony teraz?', !!process.env.JWT_SECRET);
    }
    
    // Sprawdź połączenie z bazą danych
    console.log('\nSprawdzam połączenie z bazą danych...');
    try {
      await pool.query('SELECT 1');
      console.log('✅ Połączenie z bazą danych działa');
    } catch (dbError) {
      console.log('❌ Problem z połączeniem z bazą danych:', dbError.message);
      return;
    }
    
    // Sprawdź dane użytkownika
    const email = 'admin@example.com';
    const password = 'Admin123';
    console.log(`\nSprawdzam użytkownika ${email} w bazie danych...`);
    
    // Pobierz użytkownika
    const userResult = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
    
    if (userResult.rows.length === 0) {
      console.log(`❌ Użytkownik ${email} nie istnieje w bazie danych!`);
      return;
    }
    
    const user = userResult.rows[0];
    console.log('✅ Użytkownik znaleziony w bazie danych');
    console.log('ID użytkownika:', user.id);
    console.log('Hasło przechowywane w bazie:', user.password ? user.password.substring(0, 10) + '...' : 'NULL');
    
    // Sprawdź hasło
    console.log('\nSprawdzam hasło...');
    try {
      const isPasswordValid = await bcrypt.compare(password, user.password);
      console.log(`Weryfikacja hasła: ${isPasswordValid ? '✅ POPRAWNE' : '❌ NIEPOPRAWNE'}`);
      
      if (!isPasswordValid) {
        // Resetuj hasło jako ostateczne rozwiązanie
        console.log('\nResetuję hasło użytkownika...');
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);
        
        await pool.query(
          'UPDATE users SET password = $1, updated_at = $2 WHERE id = $3 RETURNING id',
          [hashedPassword, new Date(), user.id]
        );
        
        console.log('✅ Hasło zostało zresetowane');
        console.log('Nowy hash hasła:', hashedPassword);
      }
    } catch (bcryptError) {
      console.log('❌ Błąd weryfikacji hasła:', bcryptError.message);
    }
    
    // Spróbuj wygenerować token JWT
    console.log('\nGeneruję token JWT...');
    try {
      const token = jwt.sign(
        { id: user.id },
        process.env.JWT_SECRET || 'amicus_secret_key_123',
        { expiresIn: process.env.JWT_EXPIRES_IN || '7d' }
      );
      
      console.log('✅ Token JWT wygenerowany poprawnie');
      console.log('Token:', token.substring(0, 20) + '...');
    } catch (jwtError) {
      console.log('❌ Błąd generowania tokena JWT:', jwtError.message);
    }
    
    console.log('\n==== SUGESTIE NAPRAWY ====');
    console.log('1. Upewnij się, że plik .env zawiera JWT_SECRET');
    console.log('2. Sprawdź czy kontroler auth poprawnie obsługuje błędy');
    console.log('3. Zrestartuj serwer po zmianach: systemctl restart amicus-backend.service');
    
  } catch (error) {
    console.error('Błąd podczas diagnostyki:', error);
  } finally {
    pool.end();
  }
}

diagnoseAuth();

===== config/db.js =====
const { Pool } = require('pg');
const dotenv = require('dotenv');

dotenv.config();

const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  ssl: process.env.NODE_ENV === 'production' ? {
    rejectUnauthorized: false // Akceptuje certyfikaty self-signed
  } : false
});

// Test połączenia
pool.connect((err, client, release) => {
  if (err) {
    console.error('Błąd połączenia z bazą danych:', err.stack);
  } else {
    console.log('Połączenie z bazą danych ustanowione pomyślnie');
    release();
  }
});

module.exports = {
  query: (text, params) => pool.query(text, params),
  pool
};

===== controllers/animalController.js =====
const animalService = require('../services/animalService');
const { AppError } = require('../middleware/errorHandler');

exports.getAnimal = async (req, res, next) => {
  try {
    const animalId = req.params.id;
    const animal = await animalService.getAnimal(animalId);
    
    // Sprawdzenie czy zwierzę należy do zalogowanego użytkownika
    if (animal.owner_id !== req.userId) {
      return next(new AppError('Brak uprawnień do tego zwierzęcia', 403));
    }

    res.status(200).json({
      status: 'success',
      data: animal
    });
  } catch (error) {
    next(error);
  }
};

exports.getUserAnimals = async (req, res, next) => {
  try {
    const ownerId = req.userId; // Domyślnie pobieramy zwierzęta zalogowanego użytkownika
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    
    const result = await animalService.getOwnerAnimals(ownerId, page, limit);

    res.status(200).json({
      status: 'success',
      data: result.animals,
      pagination: result.pagination
    });
  } catch (error) {
    next(error);
  }
};

exports.createAnimal = async (req, res, next) => {
  try {
    const animalData = {
      owner_id: req.userId, // Przypisujemy zwierzę do zalogowanego użytkownika
      animal_number: req.body.animal_number,
      age: req.body.age,
      sex: req.body.sex,
      breed: req.body.breed,
      photo: req.body.photo
    };

    const animal = await animalService.createAnimal(animalData);

    res.status(201).json({
      status: 'success',
      data: animal
    });
  } catch (error) {
    next(error);
  }
};

exports.updateAnimal = async (req, res, next) => {
  try {
    const animalId = req.params.id;
    
    // Sprawdzamy, czy zwierzę należy do zalogowanego użytkownika
    const animal = await animalService.getAnimal(animalId);
    if (animal.owner_id !== req.userId) {
      return next(new AppError('Brak uprawnień do edycji tego zwierzęcia', 403));
    }
    
    const animalData = {
      animal_number: req.body.animal_number,
      age: req.body.age,
      sex: req.body.sex,
      breed: req.body.breed,
      photo: req.body.photo
    };

    const updatedAnimal = await animalService.updateAnimal(animalId, animalData);

    res.status(200).json({
      status: 'success',
      data: updatedAnimal
    });
  } catch (error) {
    next(error);
  }
};

exports.deleteAnimal = async (req, res, next) => {
  try {
    const animalId = req.params.id;
    
    // Sprawdzamy, czy zwierzę należy do zalogowanego użytkownika
    const animal = await animalService.getAnimal(animalId);
    if (animal.owner_id !== req.userId) {
      return next(new AppError('Brak uprawnień do usunięcia tego zwierzęcia', 403));
    }

    await animalService.deleteAnimal(animalId);

    res.status(200).json({
      status: 'success',
      message: 'Zwierzę zostało usunięte'
    });
  } catch (error) {
    next(error);
  }
};

===== controllers/authController.js =====
const authService = require('../services/authService');
const { AppError } = require('../middleware/errorHandler');

exports.register = async (req, res, next) => {
  try {
    const userData = {
      email: req.body.email,
      password: req.body.password,
      first_name: req.body.first_name,
      last_name: req.body.last_name,
      phone: req.body.phone,
      street: req.body.street,
      house_number: req.body.house_number,
      city: req.body.city,
      postal_code: req.body.postal_code,
      tax_id: req.body.tax_id
    };

    const organizationData = req.body.organization || null;

    const result = await authService.register(userData, organizationData);

    res.status(201).json({
      status: 'success',
      data: {
        user: result.user,
        organization: result.organization,
        token: result.token
      }
    });
  } catch (error) {
    next(error);
  }
};

exports.login = async (req, res, next) => {
  try {
    console.log('[CONTROLLER] Rozpoczęcie procesu logowania');
    console.log('[CONTROLLER] Dane z żądania:', req.body);
    
    const { email, password } = req.body;
    
    if (!email || !password) {
      console.log('[CONTROLLER] ❌ Brak email lub hasła');
      return next(new AppError('Email i hasło są wymagane', 400));
    }

    try {
      console.log('[CONTROLLER] Wywołanie authService.login...');
      const result = await authService.login(email, password);
      console.log('[CONTROLLER] ✅ Logowanie zakończone sukcesem');
      
      return res.status(200).json({
        status: 'success',
        data: {
          user: result.user,
          organizations: result.organizations,
          token: result.token
        }
      });
    } catch (serviceError) {
      console.log('[CONTROLLER] ❌ Błąd z authService:', serviceError.message);
      return next(new AppError('Nieprawidłowe dane logowania', 401));
    }
  } catch (error) {
    console.log('[CONTROLLER] ⚠️ Nieoczekiwany błąd:', error.message);
    return next(new AppError('Wystąpił błąd podczas logowania', 500));
  }
};

exports.getMe = async (req, res, next) => {
  try {
    const result = await authService.getUserProfile(req.userId);

    res.status(200).json({
      status: 'success',
      data: {
        user: result.user,
        organizations: result.organizations
      }
    });
  } catch (error) {
    next(error);
  }
};

===== controllers/authController.js.bak =====
const authService = require('../services/authService');
const { AppError } = require('../middleware/errorHandler');

exports.register = async (req, res, next) => {
  try {
    const userData = {
      email: req.body.email,
      password: req.body.password,
      first_name: req.body.first_name,
      last_name: req.body.last_name,
      phone: req.body.phone,
      street: req.body.street,
      house_number: req.body.house_number,
      city: req.body.city,
      postal_code: req.body.postal_code,
      tax_id: req.body.tax_id
    };

    const organizationData = req.body.organization || null;

    const result = await authService.register(userData, organizationData);

    res.status(201).json({
      status: 'success',
      data: {
        user: result.user,
        organization: result.organization,
        token: result.token
      }
    });
  } catch (error) {
    next(error);
  }
};

exports.login = async (req, res, next) => {
  try {
    console.log('DEBUG: Rozpoczęcie logowania');
    console.log('DEBUG: Dane logowania:', { 
      email: req.body.email, 
      hasPassword: !!req.body.password 
    });

    const { email, password } = req.body;

    try {
      console.log('DEBUG: Wywołanie authService.login');
      const result = await authService.login(email, password);
      console.log('DEBUG: Otrzymano wynik z authService.login');
      
      // Zaloguj odpowiedź bez wrażliwych danych
      console.log('DEBUG: Sukces logowania, zwracam użytkownika i token');
      
      res.status(200).json({
        status: 'success',
        data: {
          user: result.user,
          organizations: result.organizations,
          token: result.token
        }
      });
    } catch (serviceError) {
      console.log('DEBUG: Błąd z authService:', serviceError.message);
      throw serviceError;
    }
  } catch (error) {
    console.log('DEBUG: Końcowy błąd w kontrolerze:', error.message);
    next(new AppError('Nieprawidłowe dane logowania', 401));
  }
};

exports.getMe = async (req, res, next) => {
  try {
    const result = await authService.getUserProfile(req.userId);

    res.status(200).json({
      status: 'success',
      data: {
        user: result.user,
        organizations: result.organizations
      }
    });
  } catch (error) {
    console.log("DEBUG CRITICAL: Błąd logowania:", error);
    next(new AppError("Nieprawidłowe dane logowania", 401));
  }
};

===== controllers/bullController.js =====
const bullService = require('../services/bullService');
const { AppError } = require('../middleware/errorHandler');

exports.getBull = async (req, res, next) => {
  try {
    const bullId = req.params.id;
    const bull = await bullService.getBull(bullId);

    res.status(200).json({
      status: 'success',
      data: bull
    });
  } catch (error) {
    next(error);
  }
};

exports.getAllBulls = async (req, res, next) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const searchTerm = req.query.search || '';
    
    const result = await bullService.getAllBulls(page, limit, searchTerm);

    res.status(200).json({
      status: 'success',
      data: result.bulls,
      pagination: result.pagination
    });
  } catch (error) {
    next(error);
  }
};

exports.createBull = async (req, res, next) => {
  try {
    const bullData = {
      identification_number: req.body.identification_number,
      vet_number: req.body.vet_number,
      breed: req.body.breed,
      semen_production_date: req.body.semen_production_date,
      supplier: req.body.supplier,
      bull_type: req.body.bull_type,
      last_delivery_date: req.body.last_delivery_date,
      straws_last_delivery: req.body.straws_last_delivery,
      current_straw_count: req.body.current_straw_count,
      suggested_price: req.body.suggested_price,
      additional_info: req.body.additional_info,
      favorite: req.body.favorite,
      vet_id: req.body.vet_id
    };

    const bull = await bullService.createBull(bullData);

    res.status(201).json({
      status: 'success',
      data: bull
    });
  } catch (error) {
    next(error);
  }
};

exports.updateBull = async (req, res, next) => {
  try {
    const bullId = req.params.id;
    
    const bullData = {
      identification_number: req.body.identification_number,
      vet_number: req.body.vet_number,
      breed: req.body.breed,
      semen_production_date: req.body.semen_production_date,
      supplier: req.body.supplier,
      bull_type: req.body.bull_type,
      last_delivery_date: req.body.last_delivery_date,
      straws_last_delivery: req.body.straws_last_delivery,
      current_straw_count: req.body.current_straw_count,
      suggested_price: req.body.suggested_price,
      additional_info: req.body.additional_info,
      favorite: req.body.favorite,
      vet_id: req.body.vet_id
    };

    const updatedBull = await bullService.updateBull(bullId, bullData);

    res.status(200).json({
      status: 'success',
      data: updatedBull
    });
  } catch (error) {
    next(error);
  }
};

exports.deleteBull = async (req, res, next) => {
  try {
    const bullId = req.params.id;
    
    await bullService.deleteBull(bullId);

    res.status(200).json({
      status: 'success',
      message: 'Byk został usunięty'
    });
  } catch (error) {
    next(error);
  }
};

===== controllers/inseminationController.js =====
const inseminationService = require('../services/inseminationService');
const { AppError } = require('../middleware/errorHandler');

exports.getInsemination = async (req, res, next) => {
  try {
    const inseminationId = req.params.id;
    const insemination = await inseminationService.getInsemination(inseminationId);
    
    // Sprawdzenie czy inseminacja należy do zalogowanego użytkownika
    if (insemination.owner_id !== req.userId) {
      return next(new AppError('Brak uprawnień do tego wpisu inseminacji', 403));
    }

    res.status(200).json({
      status: 'success',
      data: insemination
    });
  } catch (error) {
    next(error);
  }
};

exports.getAnimalInseminations = async (req, res, next) => {
  try {
    const animalId = req.params.animalId;
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    
    const result = await inseminationService.getAnimalInseminations(animalId, page, limit);
    
    // Tutaj można dodać sprawdzenie czy zwierzę należy do użytkownika
    // W tym przypadku zakładamy, że walidacja jest w serwisie

    res.status(200).json({
      status: 'success',
      data: {
        animal: result.animal,
        inseminations: result.inseminations
      }
    });
  } catch (error) {
    next(error);
  }
};

exports.getUserInseminations = async (req, res, next) => {
  try {
    const ownerId = req.userId;
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    
    // Obsługa filtrów
    const filters = {};
    if (req.query.startDate) filters.startDate = req.query.startDate;
    if (req.query.endDate) filters.endDate = req.query.endDate;
    if (req.query.animalId) filters.animalId = req.query.animalId;
    
    const result = await inseminationService.getOwnerInseminations(ownerId, page, limit, filters);

    res.status(200).json({
      status: 'success',
      data: result.inseminations,
      pagination: result.pagination
    });
  } catch (error) {
    next(error);
  }
};

exports.createInsemination = async (req, res, next) => {
  try {
    // Przypisujemy inseminację do zalogowanego użytkownika
    const inseminationData = {
      animal_id: req.body.animal_id,
      certificate_number: req.body.certificate_number,
      file_number: req.body.file_number,
      procedure_number: req.body.procedure_number,
      re_insemination: req.body.re_insemination,
      procedure_date: req.body.procedure_date,
      herd_number: req.body.herd_number,
      herd_eval_number: req.body.herd_eval_number,
      dam_owner: req.body.dam_owner,
      ear_tag_number: req.body.ear_tag_number,
      last_calving_date: req.body.last_calving_date,
      name: req.body.name,
      bull_type: req.body.bull_type,
      supplier: req.body.supplier,
      inseminator: req.body.inseminator,
      symlek_status: req.body.symlek_status,
      symlek_responsibility: req.body.symlek_responsibility,
      owner_id: req.userId,
      bull_id: req.body.bull_id
    };

    const insemination = await inseminationService.createInsemination(inseminationData);

    res.status(201).json({
      status: 'success',
      data: insemination
    });
  } catch (error) {
    next(error);
  }
};

exports.updateInsemination = async (req, res, next) => {
  try {
    const inseminationId = req.params.id;
    
    // Sprawdzamy, czy inseminacja należy do zalogowanego użytkownika
    const insemination = await inseminationService.getInsemination(inseminationId);
    if (insemination.owner_id !== req.userId) {
      return next(new AppError('Brak uprawnień do edycji tego wpisu inseminacji', 403));
    }
    
    const inseminationData = {
      certificate_number: req.body.certificate_number,
      file_number: req.body.file_number,
      procedure_number: req.body.procedure_number,
      re_insemination: req.body.re_insemination,
      procedure_date: req.body.procedure_date,
      herd_number: req.body.herd_number,
      herd_eval_number: req.body.herd_eval_number,
      dam_owner: req.body.dam_owner,
      ear_tag_number: req.body.ear_tag_number,
      last_calving_date: req.body.last_calving_date,
      name: req.body.name,
      bull_type: req.body.bull_type,
      supplier: req.body.supplier,
      inseminator: req.body.inseminator,
      symlek_status: req.body.symlek_status,
      symlek_responsibility: req.body.symlek_responsibility,
      bull_id: req.body.bull_id
    };

    const updatedInsemination = await inseminationService.updateInsemination(
      inseminationId, 
      inseminationData
    );

    res.status(200).json({
      status: 'success',
      data: updatedInsemination
    });
  } catch (error) {
    next(error);
  }
};

exports.deleteInsemination = async (req, res, next) => {
  try {
    const inseminationId = req.params.id;
    
    // Sprawdzamy, czy inseminacja należy do zalogowanego użytkownika
    const insemination = await inseminationService.getInsemination(inseminationId);
    if (insemination.owner_id !== req.userId) {
      return next(new AppError('Brak uprawnień do usunięcia tego wpisu inseminacji', 403));
    }

    await inseminationService.deleteInsemination(inseminationId);

    res.status(200).json({
      status: 'success',
      message: 'Wpis inseminacji został usunięty'
    });
  } catch (error) {
    next(error);
  }
};

===== controllers/keyController.js =====
const keyService = require('../services/keyService');
const { AppError } = require('../middleware/errorHandler');

exports.getUserKey = async (req, res, next) => {
  try {
    const userId = req.userId;
    const key = await keyService.getUserKey(userId);
    
    if (!key) {
      return res.status(404).json({
        status: 'fail',
        message: 'Klucz nie znaleziony'
      });
    }

    res.status(200).json({
      status: 'success',
      data: key
    });
  } catch (error) {
    next(error);
  }
};

exports.createOrUpdateUserKey = async (req, res, next) => {
  try {
    const userId = req.userId;
    const { public_key, backup_encrypted_private_key } = req.body;
    
    if (!public_key) {
      return next(new AppError('Klucz publiczny jest wymagany', 400));
    }
    
    const keyData = {
      public_key,
      backup_encrypted_private_key
    };
    
    const key = await keyService.createOrUpdateUserKey(userId, keyData);

    res.status(200).json({
      status: 'success',
      data: key
    });
  } catch (error) {
    next(error);
  }
};

===== controllers/organizationController.js =====
const organizationService = require('../services/organizationService');
const { AppError } = require('../middleware/errorHandler');

exports.getOrganization = async (req, res, next) => {
  try {
    const organizationId = req.params.id;
    
    // Sprawdź czy użytkownik ma dostęp do tej organizacji
    const hasAccess = await organizationService.checkUserPermission(organizationId, req.userId);
    if (!hasAccess) {
      return next(new AppError('Brak dostępu do tej organizacji', 403));
    }
    
    const organization = await organizationService.getOrganization(organizationId);

    res.status(200).json({
      status: 'success',
      data: organization
    });
  } catch (error) {
    next(error);
  }
};

exports.createOrganization = async (req, res, next) => {
  try {
    const organizationData = {
      name: req.body.name,
      street: req.body.street,
      house_number: req.body.house_number,
      city: req.body.city,
      postal_code: req.body.postal_code,
      tax_id: req.body.tax_id
    };

    const organization = await organizationService.createOrganization(organizationData, req.userId);

    res.status(201).json({
      status: 'success',
      data: organization
    });
  } catch (error) {
    next(error);
  }
};

exports.getUserOrganizations = async (req, res, next) => {
  try {
    const organizations = await organizationService.getUserOrganizations(req.userId);

    res.status(200).json({
      status: 'success',
      data: organizations
    });
  } catch (error) {
    next(error);
  }
};

exports.addUserToOrganization = async (req, res, next) => {
  try {
    const { organizationId, userId, role } = req.body;
    
    // Sprawdź czy użytkownik jest administratorem organizacji
    const isAdmin = await organizationService.checkUserPermission(organizationId, req.userId, 'admin');
    if (!isAdmin) {
      return next(new AppError('Tylko administrator może dodawać użytkowników do organizacji', 403));
    }
    
    const result = await organizationService.addUserToOrganization(organizationId, userId, role);

    res.status(201).json({
      status: 'success',
      data: result
    });
  } catch (error) {
    next(error);
  }
};

===== controllers/userController.js =====
const userService = require('../services/userService');
const { AppError } = require('../middleware/errorHandler');

exports.getProfile = async (req, res, next) => {
  try {
    const result = await userService.getUserProfile(req.userId);

    res.status(200).json({
      status: 'success',
      data: result
    });
  } catch (error) {
    next(error);
  }
};

exports.updateProfile = async (req, res, next) => {
  try {
    const userData = {
      first_name: req.body.first_name,
      last_name: req.body.last_name,
      phone: req.body.phone,
      street: req.body.street,
      house_number: req.body.house_number,
      city: req.body.city,
      postal_code: req.body.postal_code,
      tax_id: req.body.tax_id
    };

    const updatedUser = await userService.updateUserProfile(req.userId, userData);

    res.status(200).json({
      status: 'success',
      data: updatedUser
    });
  } catch (error) {
    next(error);
  }
};

exports.changePassword = async (req, res, next) => {
  try {
    const { current_password, new_password } = req.body;

    if (!current_password || !new_password) {
      return next(new AppError('Bieżące i nowe hasło są wymagane', 400));
    }

    const result = await userService.changePassword(req.userId, current_password, new_password);

    res.status(200).json({
      status: 'success',
      message: 'Hasło zostało zmienione'
    });
  } catch (error) {
    next(error);
  }
};

===== controllers/visitController.js =====
const visitService = require('../services/visitService');
const { AppError } = require('../middleware/errorHandler');

exports.getVisit = async (req, res, next) => {
  try {
    const visitId = req.params.id;
    const visit = await visitService.getVisit(visitId);
    
    // Sprawdzenie czy wizyta dotyczy zalogowanego użytkownika
    // Może być farmerId, vetId lub employeeId
    if (visit.farmer_id !== req.userId && visit.vet_id !== req.userId && visit.employee_id !== req.userId) {
      return next(new AppError('Brak uprawnień do tej wizyty', 403));
    }

    res.status(200).json({
      status: 'success',
      data: visit
    });
  } catch (error) {
    next(error);
  }
};

exports.getFarmerVisits = async (req, res, next) => {
  try {
    const farmerId = req.userId; // Pobieramy wizyty zalogowanego użytkownika
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    
    const result = await visitService.getFarmerVisits(farmerId, page, limit);

    res.status(200).json({
      status: 'success',
      data: result.visits,
      pagination: result.pagination
    });
  } catch (error) {
    next(error);
  }
};

exports.getVetVisits = async (req, res, next) => {
  try {
    const vetId = req.userId; // Pobieramy wizyty zalogowanego weterynarza
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    
    const result = await visitService.getVetVisits(vetId, page, limit);

    res.status(200).json({
      status: 'success',
      data: result.visits,
      pagination: result.pagination
    });
  } catch (error) {
    next(error);
  }
};

exports.createVisit = async (req, res, next) => {
  try {
    const visitData = {
      farmer_id: req.body.farmer_id,
      vet_id: req.body.vet_id,
      visit_date: req.body.visit_date,
      description: req.body.description,
      status: req.body.status || 'Scheduled',
      employee_id: req.body.employee_id,
      channel: req.body.channel
    };

    const visit = await visitService.createVisit(visitData);

    res.status(201).json({
      status: 'success',
      data: visit
    });
  } catch (error) {
    next(error);
  }
};

exports.updateVisit = async (req, res, next) => {
  try {
    const visitId = req.params.id;
    
    // Sprawdzamy, czy wizyta dotyczy zalogowanego użytkownika
    const visit = await visitService.getVisit(visitId);
    if (visit.farmer_id !== req.userId && visit.vet_id !== req.userId && visit.employee_id !== req.userId) {
      return next(new AppError('Brak uprawnień do edycji tej wizyty', 403));
    }
    
    const visitData = {
      visit_date: req.body.visit_date,
      description: req.body.description,
      status: req.body.status,
      vet_id: req.body.vet_id,
      employee_id: req.body.employee_id,
      channel: req.body.channel
    };

    const updatedVisit = await visitService.updateVisit(visitId, visitData);

    res.status(200).json({
      status: 'success',
      data: updatedVisit
    });
  } catch (error) {
    next(error);
  }
};

exports.deleteVisit = async (req, res, next) => {
  try {
    const visitId = req.params.id;
    
    // Sprawdzamy, czy wizyta dotyczy zalogowanego użytkownika
    const visit = await visitService.getVisit(visitId);
    if (visit.farmer_id !== req.userId && visit.vet_id !== req.userId && visit.employee_id !== req.userId) {
      return next(new AppError('Brak uprawnień do usunięcia tej wizyty', 403));
    }

    await visitService.deleteVisit(visitId);

    res.status(200).json({
      status: 'success',
      message: 'Wizyta została usunięta'
    });
  } catch (error) {
    next(error);
  }
};

===== create-user.js =====
const bcrypt = require('bcryptjs');
const { pool } = require('./config/db');

async function createDefaultUser() {
  try {
    // Sprawdzamy czy użytkownik już istnieje
    const checkResult = await pool.query(
      'SELECT * FROM users WHERE email = $1',
      ['admin@example.com']
    );

    if (checkResult.rows.length > 0) {
      console.log('Użytkownik admin@example.com już istnieje');
      return;
    }

    // Tworzymy hash hasła
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash('Admin123', salt);

    // Dodajemy użytkownika
    const result = await pool.query(
      `INSERT INTO users (
        email, password, first_name, last_name, 
        status, created_at, updated_at
      ) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING *`,
      [
        'admin@example.com',
        hashedPassword,
        'Admin',
        'User',
        'active',
        new Date(),
        new Date()
      ]
    );

    console.log('Utworzono użytkownika:', result.rows[0]);
  } catch (error) {
    console.error('Błąd podczas tworzenia użytkownika:', error);
  } finally {
    // Zamknij połączenie z bazą danych
    pool.end();
  }
}

// Uruchom funkcję
createDefaultUser();

===== debug-auth.js =====
const bcrypt = require('bcryptjs');
const { pool } = require('./config/db');

async function debugAuth() {
  try {
    const email = 'admin@example.com';
    const password = 'Admin123';
    
    console.log('=== DIAGNOSTYKA PROCESU LOGOWANIA ===');
    console.log(`Email: ${email}, Hasło: ${password}`);
    
    // 1. Sprawdź, czy użytkownik istnieje w bazie
    const userQuery = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
    
    if (userQuery.rows.length === 0) {
      console.log('❌ BŁĄD: Użytkownik nie istnieje w bazie danych');
      return;
    }
    
    const user = userQuery.rows[0];
    console.log('✅ Użytkownik znaleziony w bazie danych:', {
      id: user.id,
      email: user.email,
      password_length: user.password ? user.password.length : 0,
      password_hash: user.password ? user.password.substring(0, 20) + '...' : 'NULL'
    });
    
    // 2. Sprawdź hasło
    try {
      const isPasswordValid = await bcrypt.compare(password, user.password);
      console.log(`Wynik weryfikacji hasła: ${isPasswordValid ? '✅ POPRAWNE' : '❌ NIEPOPRAWNE'}`);
      
      if (!isPasswordValid) {
        // Sprawdź, czy hasło nie jest jakimś innym hasłem
        const testPasswords = ['admin123', 'Admin123!', 'admin', 'password', '123456'];
        for (const testPwd of testPasswords) {
          try {
            const isOtherPassword = await bcrypt.compare(testPwd, user.password);
            if (isOtherPassword) {
              console.log(`🔍 Znaleziono pasujące hasło: "${testPwd}"`);
              break;
            }
          } catch (err) {}
        }
      }
    } catch (bcryptError) {
      console.log('❌ BŁĄD przy weryfikacji hasła:', bcryptError.message);
    }
    
    // 3. Zresetuj hasło z nowym salt
    const salt = await bcrypt.genSalt(10);
    const newPasswordHash = await bcrypt.hash(password, salt);
    
    console.log('Nowy hash hasła:', newPasswordHash);
    
    // 4. Zapisz nowe hasło
    const updateResult = await pool.query(
      'UPDATE users SET password = $1, updated_at = $2 WHERE id = $3 RETURNING id',
      [newPasswordHash, new Date(), user.id]
    );
    
    console.log(`✅ Hasło zostało zaktualizowane dla użytkownika ID ${updateResult.rows[0].id}`);
    
    // 5. Przetestuj nowe hasło
    const updatedUserQuery = await pool.query('SELECT password FROM users WHERE id = $1', [user.id]);
    const updatedPasswordHash = updatedUserQuery.rows[0].password;
    
    const verifyNewPassword = await bcrypt.compare(password, updatedPasswordHash);
    console.log(`Weryfikacja nowego hasła: ${verifyNewPassword ? '✅ POPRAWNE' : '❌ NIEPOPRAWNE'}`);
    
    console.log('\n=== ZALECENIA ===');
    if (verifyNewPassword) {
      console.log('1. Zrestartuj serwer backendu: systemctl restart amicus-backend.service');
      console.log('2. Spróbuj zalogować się przez API: curl -X POST http://localhost:4000/api/auth/login -H "Content-Type: application/json" -d \'{"email":"admin@example.com","password":"Admin123"}\'');
      console.log('3. Dodaj dodatkowe informacje w logach autoryzacji, aby zrozumieć dokładniej problem');
    } else {
      console.log('Mamy problem z hasłem - haszowanie nie działa poprawnie.');
    }
    
  } catch (error) {
    console.error('BŁĄD DIAGNOSTYKI:', error);
  } finally {
    pool.end();
  }
}

debugAuth();

===== error.log =====
{"level":"error","message":"Nie znaleziono - /api/health","method":"HEAD","path":"/api/health","stack":"Error: Nie znaleziono - /api/health\n    at notFoundHandler (/var/www/amicus/backend/middleware/errorHandler.js:83:17)\n    at Layer.handle [as handle_request] (/var/www/amicus/backend/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/var/www/amicus/backend/node_modules/express/lib/router/index.js:328:13)\n    at /var/www/amicus/backend/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/var/www/amicus/backend/node_modules/express/lib/router/index.js:346:12)\n    at next (/var/www/amicus/backend/node_modules/express/lib/router/index.js:280:10)\n    at /var/www/amicus/backend/node_modules/express-rate-limit/dist/index.cjs:659:7\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /var/www/amicus/backend/node_modules/express-rate-limit/dist/index.cjs:576:5","statusCode":404,"timestamp":"2025-03-23T12:41:22.054Z"}
{"level":"error","message":"Nie znaleziono - /api/health","method":"HEAD","path":"/api/health","stack":"Error: Nie znaleziono - /api/health\n    at notFoundHandler (/var/www/amicus/backend/middleware/errorHandler.js:83:17)\n    at Layer.handle [as handle_request] (/var/www/amicus/backend/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/var/www/amicus/backend/node_modules/express/lib/router/index.js:328:13)\n    at /var/www/amicus/backend/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/var/www/amicus/backend/node_modules/express/lib/router/index.js:346:12)\n    at next (/var/www/amicus/backend/node_modules/express/lib/router/index.js:280:10)\n    at /var/www/amicus/backend/node_modules/express-rate-limit/dist/index.cjs:659:7\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /var/www/amicus/backend/node_modules/express-rate-limit/dist/index.cjs:576:5","statusCode":404,"timestamp":"2025-03-23T12:41:42.827Z"}
{"level":"error","message":"Nie znaleziono - /","method":"GET","path":"/","stack":"Error: Nie znaleziono - /\n    at notFoundHandler (/var/www/amicus/backend/middleware/errorHandler.js:83:17)\n    at Layer.handle [as handle_request] (/var/www/amicus/backend/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/var/www/amicus/backend/node_modules/express/lib/router/index.js:328:13)\n    at /var/www/amicus/backend/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/var/www/amicus/backend/node_modules/express/lib/router/index.js:346:12)\n    at next (/var/www/amicus/backend/node_modules/express/lib/router/index.js:280:10)\n    at /var/www/amicus/backend/node_modules/express-rate-limit/dist/index.cjs:659:7\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /var/www/amicus/backend/node_modules/express-rate-limit/dist/index.cjs:576:5","statusCode":404,"timestamp":"2025-03-23T12:47:02.423Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T12:49:40.208Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T12:49:43.727Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T12:49:51.521Z"}
{"level":"error","message":"Nie znaleziono - /","method":"GET","path":"/","stack":"Error: Nie znaleziono - /\n    at notFoundHandler (/var/www/amicus/backend/middleware/errorHandler.js:83:17)\n    at Layer.handle [as handle_request] (/var/www/amicus/backend/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/var/www/amicus/backend/node_modules/express/lib/router/index.js:328:13)\n    at /var/www/amicus/backend/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/var/www/amicus/backend/node_modules/express/lib/router/index.js:346:12)\n    at next (/var/www/amicus/backend/node_modules/express/lib/router/index.js:280:10)\n    at /var/www/amicus/backend/node_modules/express-rate-limit/dist/index.cjs:659:7\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /var/www/amicus/backend/node_modules/express-rate-limit/dist/index.cjs:576:5","statusCode":404,"timestamp":"2025-03-23T12:50:15.774Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T12:50:38.138Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T12:50:45.954Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T12:52:59.499Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T12:53:07.213Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T12:53:16.238Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T13:39:36.725Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T13:40:55.121Z"}
{"level":"error","message":"Nie znaleziono - /api/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php","method":"GET","path":"/api/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php","stack":"Error: Nie znaleziono - /api/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php\n    at notFoundHandler (/var/www/amicus/backend/middleware/errorHandler.js:83:17)\n    at Layer.handle [as handle_request] (/var/www/amicus/backend/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/var/www/amicus/backend/node_modules/express/lib/router/index.js:328:13)\n    at /var/www/amicus/backend/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/var/www/amicus/backend/node_modules/express/lib/router/index.js:346:12)\n    at next (/var/www/amicus/backend/node_modules/express/lib/router/index.js:280:10)\n    at /var/www/amicus/backend/node_modules/express-rate-limit/dist/index.cjs:659:7\n    at async /var/www/amicus/backend/node_modules/express-rate-limit/dist/index.cjs:576:5","statusCode":404,"timestamp":"2025-03-23T13:42:23.058Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T13:42:43.101Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T13:42:47.534Z"}
{"level":"error","message":"Nie znaleziono - /api/health","method":"GET","path":"/api/health","stack":"Error: Nie znaleziono - /api/health\n    at notFoundHandler (/var/www/amicus/backend/middleware/errorHandler.js:83:17)\n    at Layer.handle [as handle_request] (/var/www/amicus/backend/node_modules/express/lib/router/layer.js:95:5)\n    at trim_prefix (/var/www/amicus/backend/node_modules/express/lib/router/index.js:328:13)\n    at /var/www/amicus/backend/node_modules/express/lib/router/index.js:286:9\n    at Function.process_params (/var/www/amicus/backend/node_modules/express/lib/router/index.js:346:12)\n    at next (/var/www/amicus/backend/node_modules/express/lib/router/index.js:280:10)\n    at /var/www/amicus/backend/node_modules/express-rate-limit/dist/index.cjs:659:7\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async /var/www/amicus/backend/node_modules/express-rate-limit/dist/index.cjs:576:5","statusCode":404,"timestamp":"2025-03-23T13:47:00.692Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T13:48:05.237Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T13:55:51.200Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:05:28.328Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:05:31.761Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:05:44.453Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:10:23.568Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:10:42.602Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:11:40.679Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:11:57.146Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:15:15.414Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:17:53.968Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:20:32.860Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:20:43.424Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)","statusCode":401,"timestamp":"2025-03-23T14:26:07.996Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:26:26.499Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)","statusCode":401,"timestamp":"2025-03-23T14:26:32.686Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:26:37.529Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:51:10)","statusCode":401,"timestamp":"2025-03-23T14:26:41.261Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:68:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:27:18.907Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:68:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:43:41.887Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:68:10)","statusCode":401,"timestamp":"2025-03-23T14:44:18.419Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:68:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T14:51:32.767Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:68:10)","statusCode":401,"timestamp":"2025-03-23T14:59:53.315Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:68:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T15:01:11.318Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:68:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T15:01:49.164Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:68:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T15:03:35.260Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:68:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T15:04:06.502Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:68:10)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","statusCode":401,"timestamp":"2025-03-23T15:05:08.437Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:68:10)","statusCode":401,"timestamp":"2025-03-23T15:06:06.914Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:68:10)","statusCode":401,"timestamp":"2025-03-23T15:07:36.846Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:63:19)","statusCode":401,"timestamp":"2025-03-23T15:12:08.105Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:63:19)","statusCode":401,"timestamp":"2025-03-23T15:50:33.619Z"}
{"level":"error","message":"syntax error at end of input","method":"GET","path":"/api/auth/me","stack":"error: syntax error at end of input\n    at /var/www/amicus/backend/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async OrganizationRepository.getUserOrganizations (/var/www/amicus/backend/repositories/organizationRepository.js:39:20)\n    at async AuthService.getUserProfile (/var/www/amicus/backend/services/authService.js:117:27)\n    at async exports.getMe (/var/www/amicus/backend/controllers/authController.js:73:20)","statusCode":500,"timestamp":"2025-03-23T17:12:29.251Z"}
{"level":"error","message":"syntax error at end of input","method":"GET","path":"/api/auth/me","stack":"error: syntax error at end of input\n    at /var/www/amicus/backend/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async OrganizationRepository.getUserOrganizations (/var/www/amicus/backend/repositories/organizationRepository.js:39:20)\n    at async AuthService.getUserProfile (/var/www/amicus/backend/services/authService.js:117:27)\n    at async exports.getMe (/var/www/amicus/backend/controllers/authController.js:73:20)","statusCode":500,"timestamp":"2025-03-23T17:12:42.602Z"}
{"level":"error","message":"syntax error at end of input","method":"GET","path":"/api/auth/me","stack":"error: syntax error at end of input\n    at /var/www/amicus/backend/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async OrganizationRepository.getUserOrganizations (/var/www/amicus/backend/repositories/organizationRepository.js:39:20)\n    at async AuthService.getUserProfile (/var/www/amicus/backend/services/authService.js:117:27)\n    at async exports.getMe (/var/www/amicus/backend/controllers/authController.js:73:20)","statusCode":500,"timestamp":"2025-03-23T17:14:35.948Z"}
{"level":"error","message":"syntax error at end of input","method":"GET","path":"/api/auth/me","stack":"error: syntax error at end of input\n    at /var/www/amicus/backend/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async OrganizationRepository.getUserOrganizations (/var/www/amicus/backend/repositories/organizationRepository.js:39:20)\n    at async AuthService.getUserProfile (/var/www/amicus/backend/services/authService.js:117:27)\n    at async exports.getMe (/var/www/amicus/backend/controllers/authController.js:73:20)","statusCode":500,"timestamp":"2025-03-23T17:28:33.068Z"}
{"level":"error","message":"syntax error at end of input","method":"GET","path":"/api/auth/me","stack":"error: syntax error at end of input\n    at /var/www/amicus/backend/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async OrganizationRepository.getUserOrganizations (/var/www/amicus/backend/repositories/organizationRepository.js:39:20)\n    at async AuthService.getUserProfile (/var/www/amicus/backend/services/authService.js:117:27)\n    at async exports.getMe (/var/www/amicus/backend/controllers/authController.js:73:20)","statusCode":500,"timestamp":"2025-03-23T17:28:39.331Z"}
{"level":"error","message":"syntax error at end of input","method":"GET","path":"/api/auth/me","stack":"error: syntax error at end of input\n    at /var/www/amicus/backend/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async OrganizationRepository.getUserOrganizations (/var/www/amicus/backend/repositories/organizationRepository.js:39:20)\n    at async AuthService.getUserProfile (/var/www/amicus/backend/services/authService.js:117:27)\n    at async exports.getMe (/var/www/amicus/backend/controllers/authController.js:73:20)","statusCode":500,"timestamp":"2025-03-23T17:57:23.173Z"}
{"level":"error","message":"syntax error at end of input","method":"GET","path":"/api/auth/me","stack":"error: syntax error at end of input\n    at /var/www/amicus/backend/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async OrganizationRepository.getUserOrganizations (/var/www/amicus/backend/repositories/organizationRepository.js:39:20)\n    at async AuthService.getUserProfile (/var/www/amicus/backend/services/authService.js:117:27)\n    at async exports.getMe (/var/www/amicus/backend/controllers/authController.js:73:20)","statusCode":500,"timestamp":"2025-03-23T17:58:29.230Z"}
{"level":"error","message":"Nieprawidłowe dane logowania","method":"POST","path":"/api/auth/login","stack":"Error: Nieprawidłowe dane logowania\n    at exports.login (/var/www/amicus/backend/controllers/authController.js:63:19)","statusCode":401,"timestamp":"2025-03-23T17:58:52.226Z"}
{"level":"error","message":"syntax error at end of input","method":"GET","path":"/api/auth/me","stack":"error: syntax error at end of input\n    at /var/www/amicus/backend/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async OrganizationRepository.getUserOrganizations (/var/www/amicus/backend/repositories/organizationRepository.js:39:20)\n    at async AuthService.getUserProfile (/var/www/amicus/backend/services/authService.js:117:27)\n    at async exports.getMe (/var/www/amicus/backend/controllers/authController.js:73:20)","statusCode":500,"timestamp":"2025-03-23T17:59:50.763Z"}
{"level":"error","message":"syntax error at end of input","method":"GET","path":"/api/auth/me","stack":"error: syntax error at end of input\n    at /var/www/amicus/backend/node_modules/pg-pool/index.js:45:11\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async OrganizationRepository.getUserOrganizations (/var/www/amicus/backend/repositories/organizationRepository.js:39:20)\n    at async AuthService.getUserProfile (/var/www/amicus/backend/services/authService.js:117:27)\n    at async exports.getMe (/var/www/amicus/backend/controllers/authController.js:73:20)","statusCode":500,"timestamp":"2025-03-23T18:07:12.472Z"}

===== install.sh =====
#!/bin/bash

# Utwórz strukturę katalogów
mkdir -p /var/www/amicus
cd /var/www/amicus

# Sklonuj repozytorium backendu (jeśli korzystasz z gita)
# git clone https://your-repository-url.git backend
# cd backend

# Alternatywnie, jeśli nie korzystasz z gita
mkdir -p backend
cd backend

# Instalacja zależności
npm install

# Tworzenie pliku .env (edytuj zgodnie z potrzebami)
cat > .env << EOF
NODE_ENV=development
PORT=4000
DB_HOST=localhost
DB_PORT=5432
DB_USER=amicus
DB_PASSWORD=twoje_haslo
DB_NAME=amicusdb
JWT_SECRET=twoj_sekretny_klucz_tutaj
JWT_EXPIRES_IN=24h
EOF

echo "Backend zainstalowany pomyślnie. Uruchom go za pomocą:"
echo "cd /var/www/amicus/backend && npm run dev"

===== middleware/authMiddleware.js =====
const jwt = require('jsonwebtoken');
const userRepository = require('../repositories/userRepository');

exports.verifyToken = async (req, res, next) => {
  try {
    // Pobierz token z nagłówka Authorization
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ message: 'Brak tokenu uwierzytelniającego' });
    }

    const token = authHeader.split(' ')[1];

    // Weryfikuj token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    // Zapisz ID użytkownika w obiekcie żądania
    req.userId = decoded.id;

    // Sprawdź, czy użytkownik istnieje
    const user = await userRepository.findById(decoded.id);
    if (!user) {
      return res.status(401).json({ message: 'Nieprawidłowy token' });
    }

    // Dodaj obiekt użytkownika do żądania (bez hasła)
    const { password, ...userWithoutPassword } = user;
    req.user = userWithoutPassword;

    next();
  } catch (error) {
    if (error.name === 'JsonWebTokenError') {
      return res.status(401).json({ message: 'Nieprawidłowy token' });
    }
    if (error.name === 'TokenExpiredError') {
      return res.status(401).json({ message: 'Token wygasł' });
    }
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

exports.checkOrganizationAccess = async (req, res, next) => {
  try {
    // Przygotowanie dla przyszłych rozszerzeń - sprawdzanie uprawnień organizacji
    next();
  } catch (error) {
    return res.status(500).json({ message: 'Błąd serwera' });
  }
};

===== middleware/errorHandler.js =====
const { ValidationError } = require('express-validator');
const winston = require('winston');

// Konfiguracja loggera
const logger = winston.createLogger({
  level: 'error',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: 'error.log' }),
    new winston.transports.Console()
  ]
});

// Niestandardowa klasa błędu aplikacji
class AppError extends Error {
  constructor(message, statusCode) {
    super(message);
    this.statusCode = statusCode;
    this.isOperational = true;
    Error.captureStackTrace(this, this.constructor);
  }
}

// Middleware obsługi błędów
const errorHandler = (err, req, res, next) => {
  // Domyślny kod statusu i komunikat
  let statusCode = err.statusCode || 500;
  let message = err.message || 'Wystąpił błąd serwera';

  // Logowanie błędu
  logger.error({
    message: err.message,
    stack: err.stack,
    path: req.path,
    method: req.method,
    statusCode
  });

  // Sprawdź, czy to błąd walidacji (express-validator)
  if (Array.isArray(err) && err.every(e => e instanceof ValidationError)) {
    statusCode = 400;
    message = err.map(e => ({ 
      field: e.param, 
      message: e.msg 
    }));
  }

  // Błąd JWT
  if (err.name === 'JsonWebTokenError' || err.name === 'TokenExpiredError') {
    statusCode = 401;
    message = 'Nieprawidłowy token uwierzytelniający';
  }

  // Błędy bazy danych
  if (err.code === '23505') {  // PostgreSQL unique violation
    statusCode = 409;
    message = 'Rekord już istnieje w bazie danych';
  }

  // Błędy operacyjne mogą ujawniać szczegóły
  // Błędy programistyczne powinny pokazywać ogólny komunikat w produkcji
  const isProduction = process.env.NODE_ENV === 'production';
  
  if (!err.isOperational && isProduction) {
    message = 'Wystąpił błąd serwera';
  }

  // W trybie deweloperskim zwracamy więcej informacji
  return res.status(statusCode).json({
    status: 'error',
    message,
    ...(process.env.NODE_ENV === 'development' && !err.isOperational && { 
      stack: err.stack 
    })
  });
};

// Middleware obsługi nieistniejących tras
const notFoundHandler = (req, res, next) => {
  const error = new AppError(`Nie znaleziono - ${req.originalUrl}`, 404);
  next(error);
};

module.exports = {
  AppError,
  errorHandler,
  notFoundHandler
};

===== middleware/rateLimiter.js =====
const rateLimit = require('express-rate-limit');

// Domyślny limiter dla wszystkich tras
const defaultLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minut
  max: 100, // limit każdego IP do 100 zapytań na 'window'
  standardHeaders: true, // Zwraca info o limicie w nagłówkach `RateLimit-*`
  legacyHeaders: false, // Dezaktywuje nagłówki `X-RateLimit-*`
  trustProxy: true, // Zaufaj nagłówkom przekazywanym przez proxy (np. Nginx)
  message: {
    status: 'error',
    message: 'Zbyt wiele zapytań, spróbuj ponownie później.'
  }
});

// Bardziej restrykcyjny limiter dla tras autoryzacji
const authLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 godzina
  max: 10, // limit każdego IP do 10 zapytań na 'window'
  standardHeaders: true,
  legacyHeaders: false,
  trustProxy: true, // Zaufaj nagłówkom przekazywanym przez proxy
  message: {
    status: 'error',
    message: 'Zbyt wiele zapytań związanych z autoryzacją, spróbuj ponownie później.'
  }
});

module.exports = {
  defaultLimiter,
  authLimiter
};

===== middleware/rateLimiter.js.bak =====
const rateLimit = require('express-rate-limit');

// Domyślny limiter dla API
const defaultLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minut
  max: 100, // limit 100 zapytań z jednego IP
  standardHeaders: true, // zwracanie informacji o limicie w nagłówkach 
  legacyHeaders: false, // wyłączenie starych nagłówków 
  message: {
    status: 'error',
    message: 'Zbyt wiele zapytań, spróbuj ponownie później'
  }
});

// Limiter dla uwierzytelniania (login/rejestracja)
const authLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 godzina
  max: 10, // limit 10 zapytań z jednego IP
  standardHeaders: true,
  legacyHeaders: false,
  message: {
    status: 'error',
    message: 'Zbyt wiele prób logowania, spróbuj ponownie później'
  }
});

module.exports = {
  defaultLimiter,
  authLimiter
};

===== middleware/validator.js =====
const { body, validationResult } = require('express-validator');

// Sprawdzenie wyników walidacji
const validateRequest = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ 
      status: 'error',
      errors: errors.array() 
    });
  }
  next();
};

// Walidacja rejestracji użytkownika
const registerValidator = [
  body('email')
    .isEmail().withMessage('Podaj poprawny adres email')
    .normalizeEmail(),
  body('password')
    .isLength({ min: 6 }).withMessage('Hasło musi mieć minimum 6 znaków')
    .matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/).withMessage('Hasło musi zawierać małą literę, wielką literę i cyfrę'),
  body('first_name')
    .notEmpty().withMessage('Imię jest wymagane'),
  body('last_name')
    .notEmpty().withMessage('Nazwisko jest wymagane'),
  body('phone')
    .optional()
    .isMobilePhone().withMessage('Podaj poprawny numer telefonu'),
  validateRequest
];

// Walidacja logowania
const loginValidator = [
  body('email')
    .isEmail().withMessage('Podaj poprawny adres email')
    .normalizeEmail(),
  body('password')
    .notEmpty().withMessage('Hasło jest wymagane'),
  validateRequest
];

// Walidacja tworzenia zwierzęcia
const animalValidator = [
  body('animal_number')
    .notEmpty().withMessage('Numer zwierzęcia jest wymagany'),
  body('owner_id')
    .isInt().withMessage('ID właściciela musi być liczbą całkowitą'),
  body('age')
    .optional()
    .isInt({ min: 0 }).withMessage('Wiek musi być liczbą nieujemną'),
  body('sex')
    .optional()
    .isIn(['male', 'female']).withMessage('Płeć musi być "male" lub "female"'),
  validateRequest
];

// Walidacja tworzenia inseminacji
const inseminationValidator = [
  body('animal_id')
    .isInt().withMessage('ID zwierzęcia musi być liczbą całkowitą'),
  body('certificate_number')
    .notEmpty().withMessage('Numer certyfikatu jest wymagany'),
  body('file_number')
    .notEmpty().withMessage('Numer pliku jest wymagany'),
  body('procedure_number')
    .notEmpty().withMessage('Numer procedury jest wymagany'),
  body('procedure_date')
    .isDate().withMessage('Podaj poprawną datę procedury'),
  body('owner_id')
    .isInt().withMessage('ID właściciela musi być liczbą całkowitą'),
  body('bull_id')
    .optional()
    .isInt().withMessage('ID byka musi być liczbą całkowitą'),
  validateRequest
];

// Eksport walidatorów
module.exports = {
  validateRequest,
  registerValidator,
  loginValidator,
  animalValidator,
  inseminationValidator
};

===== package-lock.json =====
{
  "name": "amicus-backend",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "amicus-backend",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "bcryptjs": "^2.4.3",
        "cors": "^2.8.5",
        "dotenv": "^16.4.7",
        "express": "^4.21.2",
        "express-rate-limit": "^6.11.2",
        "express-validator": "^7.2.1",
        "helmet": "^6.2.0",
        "jsonwebtoken": "^9.0.2",
        "pg": "^8.14.1",
        "swagger-jsdoc": "^6.2.8",
        "swagger-ui-express": "^4.6.3",
        "winston": "^3.17.0"
      },
      "devDependencies": {
        "nodemon": "^2.0.22"
      }
    },
    "node_modules/@apidevtools/json-schema-ref-parser": {
      "version": "9.1.2",
      "resolved": "https://registry.npmjs.org/@apidevtools/json-schema-ref-parser/-/json-schema-ref-parser-9.1.2.tgz",
      "integrity": "sha512-r1w81DpR+KyRWd3f+rk6TNqMgedmAxZP5v5KWlXQWlgMUUtyEJch0DKEci1SorPMiSeM8XPl7MZ3miJ60JIpQg==",
      "license": "MIT",
      "dependencies": {
        "@jsdevtools/ono": "^7.1.3",
        "@types/json-schema": "^7.0.6",
        "call-me-maybe": "^1.0.1",
        "js-yaml": "^4.1.0"
      }
    },
    "node_modules/@apidevtools/openapi-schemas": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@apidevtools/openapi-schemas/-/openapi-schemas-2.1.0.tgz",
      "integrity": "sha512-Zc1AlqrJlX3SlpupFGpiLi2EbteyP7fXmUOGup6/DnkRgjP9bgMM/ag+n91rsv0U1Gpz0H3VILA/o3bW7Ua6BQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@apidevtools/swagger-methods": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@apidevtools/swagger-methods/-/swagger-methods-3.0.2.tgz",
      "integrity": "sha512-QAkD5kK2b1WfjDS/UQn/qQkbwF31uqRjPTrsCs5ZG9BQGAkjwvqGFjjPqAuzac/IYzpPtRzjCP1WrTuAIjMrXg==",
      "license": "MIT"
    },
    "node_modules/@apidevtools/swagger-parser": {
      "version": "10.0.3",
      "resolved": "https://registry.npmjs.org/@apidevtools/swagger-parser/-/swagger-parser-10.0.3.tgz",
      "integrity": "sha512-sNiLY51vZOmSPFZA5TF35KZ2HbgYklQnTSDnkghamzLb3EkNtcQnrBQEj5AOCxHpTtXpqMCRM1CrmV2rG6nw4g==",
      "license": "MIT",
      "dependencies": {
        "@apidevtools/json-schema-ref-parser": "^9.0.6",
        "@apidevtools/openapi-schemas": "^2.0.4",
        "@apidevtools/swagger-methods": "^3.0.2",
        "@jsdevtools/ono": "^7.1.3",
        "call-me-maybe": "^1.0.1",
        "z-schema": "^5.0.1"
      },
      "peerDependencies": {
        "openapi-types": ">=7"
      }
    },
    "node_modules/@colors/colors": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/@colors/colors/-/colors-1.6.0.tgz",
      "integrity": "sha512-Ir+AOibqzrIsL6ajt3Rz3LskB7OiMVHqltZmspbW/TJuTVuyOMirVqAkjfY6JISiLHgyNqicAC8AyHHGzNd/dA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.1.90"
      }
    },
    "node_modules/@dabh/diagnostics": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@dabh/diagnostics/-/diagnostics-2.0.3.tgz",
      "integrity": "sha512-hrlQOIi7hAfzsMqlGSFyVucrx38O+j6wiGOf//H2ecvIEqYN4ADBSS2iLMh5UFyDunCNniUIPk/q3riFv45xRA==",
      "license": "MIT",
      "dependencies": {
        "colorspace": "1.1.x",
        "enabled": "2.0.x",
        "kuler": "^2.0.0"
      }
    },
    "node_modules/@jsdevtools/ono": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/@jsdevtools/ono/-/ono-7.1.3.tgz",
      "integrity": "sha512-4JQNk+3mVzK3xh2rqd6RB4J46qUR19azEHBneZyTZM+c456qOrbbM/5xcR8huNCCcbVt7+UmizG6GuUvPvKUYg==",
      "license": "MIT"
    },
    "node_modules/@scarf/scarf": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/@scarf/scarf/-/scarf-1.4.0.tgz",
      "integrity": "sha512-xxeapPiUXdZAE3che6f3xogoJPeZgig6omHEy1rIY5WVsB3H2BHNnZH+gHG6x91SCWyQCzWGsuL2Hh3ClO5/qQ==",
      "hasInstallScript": true,
      "license": "Apache-2.0"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "license": "MIT"
    },
    "node_modules/@types/triple-beam": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/triple-beam/-/triple-beam-1.3.5.tgz",
      "integrity": "sha512-6WaYesThRMCl19iryMYP7/x2OVgCtbIVflDGFpWnb9irXI3UjYE4AzmYuiUKY1AJstGijoY+MgUszMgRxIYTYw==",
      "license": "MIT"
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "license": "Python-2.0"
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/async": {
      "version": "3.2.6",
      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==",
      "license": "MIT"
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "license": "MIT"
    },
    "node_modules/bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ==",
      "license": "MIT"
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-me-maybe": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-me-maybe/-/call-me-maybe-1.0.2.tgz",
      "integrity": "sha512-HpX65o1Hnr9HH25ojC1YGs7HCQLq0GCOibSaWER0eNpgJ/Z1MZv2mTc7+xh6WOPxbRVcmgbv4hGU+uSQ/2xFZQ==",
      "license": "MIT"
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/color": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/color/-/color-3.2.1.tgz",
      "integrity": "sha512-aBl7dZI9ENN6fUGC7mWpMTPNHmWUSNan9tuWN6ahh5ZLNk9baLJOnSMlrQkHcrfFgz2/RigjUVAjdx36VcemKA==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^1.9.3",
        "color-string": "^1.6.0"
      }
    },
    "node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "license": "MIT",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
      "license": "MIT"
    },
    "node_modules/color-string": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/color-string/-/color-string-1.9.1.tgz",
      "integrity": "sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==",
      "license": "MIT",
      "dependencies": {
        "color-name": "^1.0.0",
        "simple-swizzle": "^0.2.2"
      }
    },
    "node_modules/colorspace": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/colorspace/-/colorspace-1.1.4.tgz",
      "integrity": "sha512-BgvKJiuVu1igBUF2kEjRCZXol6wiiGbY5ipL/oVPwm0BL9sIpMIzM8IK7vwuxIIzOXMV3Ey5w+vxhm0rR/TN8w==",
      "license": "MIT",
      "dependencies": {
        "color": "^3.1.3",
        "text-hex": "1.0.x"
      }
    },
    "node_modules/commander": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-6.2.0.tgz",
      "integrity": "sha512-zP4jEKbe8SHzKJYQmq8Y9gYjtO/POJLgIdKgV7B9qNmABVFVc+ctqSX6iXh4mCpJfRBOabiZ2YKPg8ciDw6C+Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "license": "MIT"
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/doctrine": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/dotenv": {
      "version": "16.4.7",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.4.7.tgz",
      "integrity": "sha512-47qPchRCykZC03FhkYAhrvwU4xDBFIj1QPqaarj6mdM/hgUzfPHcpkHJOn3mJAufFeeAxAzeGsr5X0M4k6fLZQ==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/enabled": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/enabled/-/enabled-2.0.0.tgz",
      "integrity": "sha512-AKrN98kuwOzMIdAizXGI86UFBoo26CL21UM763y1h/GMSJ4/OHU9k2YlsmBpyScFo/wbLzWQJBMCW4+IO3/+OQ==",
      "license": "MIT"
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express-rate-limit": {
      "version": "6.11.2",
      "resolved": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-6.11.2.tgz",
      "integrity": "sha512-a7uwwfNTh1U60ssiIkuLFWHt4hAC5yxlLGU2VP0X4YNlyEDZAqF4tK3GD3NSitVBrCQmQ0++0uOyFOgC2y4DDw==",
      "license": "MIT",
      "engines": {
        "node": ">= 14"
      },
      "peerDependencies": {
        "express": "^4 || ^5"
      }
    },
    "node_modules/express-validator": {
      "version": "7.2.1",
      "resolved": "https://registry.npmjs.org/express-validator/-/express-validator-7.2.1.tgz",
      "integrity": "sha512-CjNE6aakfpuwGaHQZ3m8ltCG2Qvivd7RHtVMS/6nVxOM7xVGqr4bhflsm4+N5FP5zI7Zxp+Hae+9RE+o8e3ZOQ==",
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.17.21",
        "validator": "~13.12.0"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/fecha": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/fecha/-/fecha-4.2.3.tgz",
      "integrity": "sha512-OP2IUU6HeYKJi3i0z4A19kHMQoLVs4Hc+DPqqxI2h/DPZHTm/vjsfC6P0b4jCMy14XizLBqvndQ+UilD7707Jw==",
      "license": "MIT"
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/fn.name": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/fn.name/-/fn.name-1.1.0.tgz",
      "integrity": "sha512-GRnmB5gPyJpAhTQdSZTSp9uaPSvl09KoYcMQtsB9rQoOmzs9dH6ffeccH+Z+cv6P68Hu5bC6JjRh4Ah/mHSNRw==",
      "license": "MIT"
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/glob": {
      "version": "7.1.6",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.6.tgz",
      "integrity": "sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/helmet": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/helmet/-/helmet-6.2.0.tgz",
      "integrity": "sha512-DWlwuXLLqbrIOltR6tFQXShj/+7Cyp0gLi6uAb8qMdFh/YBBFbKSgQ6nbXmScYd8emMctuthmgIa7tUfo9Rtyg==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.3.2.tgz",
      "integrity": "sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==",
      "license": "MIT"
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "license": "MIT",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/kuler": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/kuler/-/kuler-2.0.0.tgz",
      "integrity": "sha512-Xq9nH7KlWZmXAtodXDDRE7vs6DU1gTU8zYDHDiWLSip45Egwq3plLHzPn27NgvzL2r1LMPC1vdqh98sQxtqj4A==",
      "license": "MIT"
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.get": {
      "version": "4.4.2",
      "resolved": "https://registry.npmjs.org/lodash.get/-/lodash.get-4.4.2.tgz",
      "integrity": "sha512-z+Uw/vLuy6gQe8cfaFWD7p0wVv8fJl3mbzXh33RS+0oW2wvUqiRXiQ69gLWSLpgB5/6sU+r6BlQR0MBILadqTQ==",
      "deprecated": "This package is deprecated. Use the optional chaining (?.) operator instead.",
      "license": "MIT"
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
      "license": "MIT"
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
      "license": "MIT"
    },
    "node_modules/lodash.isequal": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.isequal/-/lodash.isequal-4.5.0.tgz",
      "integrity": "sha512-pDo3lu8Jhfjqls6GkMgpahsF9kCyayhgykjyLMNFTKWrpVdAQtYyB4muAMWozBB4ig/dtWAmsMxLEI8wuz+DYQ==",
      "deprecated": "This package is deprecated. Use require('node:util').isDeepStrictEqual instead.",
      "license": "MIT"
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
      "license": "MIT"
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
      "license": "MIT"
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
      "license": "MIT"
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
      "license": "MIT"
    },
    "node_modules/lodash.mergewith": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.mergewith/-/lodash.mergewith-4.6.2.tgz",
      "integrity": "sha512-GK3g5RPZWTRSeLSpgP8Xhra+pnjBC56q9FZYe1d5RN3TJ35dbkGy3YqBSMbyCrlbi+CM9Z3Jk5yTL7RCsqboyQ==",
      "license": "MIT"
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
      "license": "MIT"
    },
    "node_modules/logform": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/logform/-/logform-2.7.0.tgz",
      "integrity": "sha512-TFYA4jnP7PVbmlBIfhlSe+WKxs9dklXMTEGcBCIvLhE/Tn3H6Gk1norupVW7m5Cnd4bLcr08AytbyV/xj7f/kQ==",
      "license": "MIT",
      "dependencies": {
        "@colors/colors": "1.6.0",
        "@types/triple-beam": "^1.3.2",
        "fecha": "^4.2.0",
        "ms": "^2.1.1",
        "safe-stable-stringify": "^2.3.1",
        "triple-beam": "^1.3.0"
      },
      "engines": {
        "node": ">= 12.0.0"
      }
    },
    "node_modules/logform/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/nodemon": {
      "version": "2.0.22",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-2.0.22.tgz",
      "integrity": "sha512-B8YqaKMmyuCO7BowF1Z1/mkPqLk6cs/l63Ojtd6otKjMx47Dq1utxfRxcavH1I7VSaL8n5BUaoutadnsX3AAVQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^3.2.7",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^5.7.1",
        "simple-update-notifier": "^1.0.7",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=8.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nodemon/node_modules/semver": {
      "version": "5.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/one-time": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/one-time/-/one-time-1.0.0.tgz",
      "integrity": "sha512-5DXOiRKwuSEcQ/l0kGCF6Q3jcADFv5tSmRaJck/OqkVFcOzutB134KRSfF0xDrL39MNnqxbHBbUUcjZIhTgb2g==",
      "license": "MIT",
      "dependencies": {
        "fn.name": "1.x.x"
      }
    },
    "node_modules/openapi-types": {
      "version": "12.1.3",
      "resolved": "https://registry.npmjs.org/openapi-types/-/openapi-types-12.1.3.tgz",
      "integrity": "sha512-N4YtSYJqghVu4iek2ZUvcN/0aqH1kRDuNqzcycDxhOUpg7GdvLa2F3DgS6yBNhInhv2r/6I0Flkn7CqL8+nIcw==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/pg": {
      "version": "8.14.1",
      "resolved": "https://registry.npmjs.org/pg/-/pg-8.14.1.tgz",
      "integrity": "sha512-0TdbqfjwIun9Fm/r89oB7RFQ0bLgduAhiIqIXOsyKoiC/L54DbuAAzIEN/9Op0f1Po9X7iCPXGoa/Ah+2aI8Xw==",
      "license": "MIT",
      "dependencies": {
        "pg-connection-string": "^2.7.0",
        "pg-pool": "^3.8.0",
        "pg-protocol": "^1.8.0",
        "pg-types": "^2.1.0",
        "pgpass": "1.x"
      },
      "engines": {
        "node": ">= 8.0.0"
      },
      "optionalDependencies": {
        "pg-cloudflare": "^1.1.1"
      },
      "peerDependencies": {
        "pg-native": ">=3.0.1"
      },
      "peerDependenciesMeta": {
        "pg-native": {
          "optional": true
        }
      }
    },
    "node_modules/pg-cloudflare": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/pg-cloudflare/-/pg-cloudflare-1.1.1.tgz",
      "integrity": "sha512-xWPagP/4B6BgFO+EKz3JONXv3YDgvkbVrGw2mTo3D6tVDQRh1e7cqVGvyR3BE+eQgAvx1XhW/iEASj4/jCWl3Q==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/pg-connection-string": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/pg-connection-string/-/pg-connection-string-2.7.0.tgz",
      "integrity": "sha512-PI2W9mv53rXJQEOb8xNR8lH7Hr+EKa6oJa38zsK0S/ky2er16ios1wLKhZyxzD7jUReiWokc9WK5nxSnC7W1TA==",
      "license": "MIT"
    },
    "node_modules/pg-int8": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/pg-int8/-/pg-int8-1.0.1.tgz",
      "integrity": "sha512-WCtabS6t3c8SkpDBUlb1kjOs7l66xsGdKpIPZsg4wR+B3+u9UAum2odSsF9tnvxg80h4ZxLWMy4pRjOsFIqQpw==",
      "license": "ISC",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/pg-pool": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/pg-pool/-/pg-pool-3.8.0.tgz",
      "integrity": "sha512-VBw3jiVm6ZOdLBTIcXLNdSotb6Iy3uOCwDGFAksZCXmi10nyRvnP2v3jl4d+IsLYRyXf6o9hIm/ZtUzlByNUdw==",
      "license": "MIT",
      "peerDependencies": {
        "pg": ">=8.0"
      }
    },
    "node_modules/pg-protocol": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/pg-protocol/-/pg-protocol-1.8.0.tgz",
      "integrity": "sha512-jvuYlEkL03NRvOoyoRktBK7+qU5kOvlAwvmrH8sr3wbLrOdVWsRxQfz8mMy9sZFsqJ1hEWNfdWKI4SAmoL+j7g==",
      "license": "MIT"
    },
    "node_modules/pg-types": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/pg-types/-/pg-types-2.2.0.tgz",
      "integrity": "sha512-qTAAlrEsl8s4OiEQY69wDvcMIdQN6wdz5ojQiOy6YRMuynxenON0O5oCpJI6lshc6scgAY8qvJ2On/p+CXY0GA==",
      "license": "MIT",
      "dependencies": {
        "pg-int8": "1.0.1",
        "postgres-array": "~2.0.0",
        "postgres-bytea": "~1.0.0",
        "postgres-date": "~1.0.4",
        "postgres-interval": "^1.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/pgpass": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/pgpass/-/pgpass-1.0.5.tgz",
      "integrity": "sha512-FdW9r/jQZhSeohs1Z3sI1yxFQNFvMcnmfuj4WBMUTxOrAyLMaTcE1aAMBiTlbMNaXvBCQuVi0R7hd8udDSP7ug==",
      "license": "MIT",
      "dependencies": {
        "split2": "^4.1.0"
      }
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/postgres-array": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/postgres-array/-/postgres-array-2.0.0.tgz",
      "integrity": "sha512-VpZrUqU5A69eQyW2c5CA1jtLecCsN2U/bD6VilrFDWq5+5UIEVO7nazS3TEcHf1zuPYO/sqGvUvW62g86RXZuA==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postgres-bytea": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/postgres-bytea/-/postgres-bytea-1.0.0.tgz",
      "integrity": "sha512-xy3pmLuQqRBZBXDULy7KbaitYqLcmxigw14Q5sj8QBVLqEwXfeybIKVWiqAXTlcvdvb0+xkOtDbfQMOf4lST1w==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postgres-date": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/postgres-date/-/postgres-date-1.0.7.tgz",
      "integrity": "sha512-suDmjLVQg78nMK2UZ454hAG+OAW+HQPZ6n++TNDUX+L0+uUlLywnoxJKDou51Zm+zTCjrCl0Nq6J9C5hP9vK/Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postgres-interval": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/postgres-interval/-/postgres-interval-1.2.0.tgz",
      "integrity": "sha512-9ZhXKM/rw350N1ovuWHbGxnGh/SNJ4cnxHiM0rxE4VN41wsg8P8zWn9hv/buK00RP4WvlOyr/RBDiptyxVbkZQ==",
      "license": "MIT",
      "dependencies": {
        "xtend": "^4.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-stable-stringify": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/safe-stable-stringify/-/safe-stable-stringify-2.5.0.tgz",
      "integrity": "sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "7.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/simple-swizzle": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/simple-swizzle/-/simple-swizzle-0.2.2.tgz",
      "integrity": "sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==",
      "license": "MIT",
      "dependencies": {
        "is-arrayish": "^0.3.1"
      }
    },
    "node_modules/simple-update-notifier": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-1.1.0.tgz",
      "integrity": "sha512-VpsrsJSUcJEseSbMHkrsrAVSdvVS5I96Qo1QAQ4FxQ9wXFcB+pjj7FB7/us9+GcgfW4ziHtYMc1J0PLczb55mg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "~7.0.0"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/simple-update-notifier/node_modules/semver": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.0.0.tgz",
      "integrity": "sha512-+GB6zVA9LWh6zovYQLALHwv5rb2PHGlJi3lfiqIHxR0uuwCgefcOJc59v9fv1w8GbStwxuuqqAjI9NMAOOgq1A==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/split2": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/split2/-/split2-4.2.0.tgz",
      "integrity": "sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==",
      "license": "ISC",
      "engines": {
        "node": ">= 10.x"
      }
    },
    "node_modules/stack-trace": {
      "version": "0.0.10",
      "resolved": "https://registry.npmjs.org/stack-trace/-/stack-trace-0.0.10.tgz",
      "integrity": "sha512-KGzahc7puUKkzyMt+IqAep+TVNbKP+k2Lmwhub39m1AsTSkaDutx56aDCo+HLDzf/D26BIHTJWNiTG1KAJiQCg==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/swagger-jsdoc": {
      "version": "6.2.8",
      "resolved": "https://registry.npmjs.org/swagger-jsdoc/-/swagger-jsdoc-6.2.8.tgz",
      "integrity": "sha512-VPvil1+JRpmJ55CgAtn8DIcpBs0bL5L3q5bVQvF4tAW/k/9JYSj7dCpaYCAv5rufe0vcCbBRQXGvzpkWjvLklQ==",
      "license": "MIT",
      "dependencies": {
        "commander": "6.2.0",
        "doctrine": "3.0.0",
        "glob": "7.1.6",
        "lodash.mergewith": "^4.6.2",
        "swagger-parser": "^10.0.3",
        "yaml": "2.0.0-1"
      },
      "bin": {
        "swagger-jsdoc": "bin/swagger-jsdoc.js"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/swagger-parser": {
      "version": "10.0.3",
      "resolved": "https://registry.npmjs.org/swagger-parser/-/swagger-parser-10.0.3.tgz",
      "integrity": "sha512-nF7oMeL4KypldrQhac8RyHerJeGPD1p2xDh900GPvc+Nk7nWP6jX2FcC7WmkinMoAmoO774+AFXcWsW8gMWEIg==",
      "license": "MIT",
      "dependencies": {
        "@apidevtools/swagger-parser": "10.0.3"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/swagger-ui-dist": {
      "version": "5.20.1",
      "resolved": "https://registry.npmjs.org/swagger-ui-dist/-/swagger-ui-dist-5.20.1.tgz",
      "integrity": "sha512-qBPCis2w8nP4US7SvUxdJD3OwKcqiWeZmjN2VWhq2v+ESZEXOP/7n4DeiOiiZcGYTKMHAHUUrroHaTsjUWTEGw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@scarf/scarf": "=1.4.0"
      }
    },
    "node_modules/swagger-ui-express": {
      "version": "4.6.3",
      "resolved": "https://registry.npmjs.org/swagger-ui-express/-/swagger-ui-express-4.6.3.tgz",
      "integrity": "sha512-CDje4PndhTD2HkgyKH3pab+LKspDeB/NhPN2OF1j+piYIamQqBYwAXWESOT1Yju2xFg51bRW9sUng2WxDjzArw==",
      "license": "MIT",
      "dependencies": {
        "swagger-ui-dist": ">=4.11.0"
      },
      "engines": {
        "node": ">= v0.10.32"
      },
      "peerDependencies": {
        "express": ">=4.0.0 || >=5.0.0-beta"
      }
    },
    "node_modules/text-hex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/text-hex/-/text-hex-1.0.0.tgz",
      "integrity": "sha512-uuVGNWzgJ4yhRaNSiubPY7OjISw4sw4E5Uv0wbjp+OzcbmVU/rsT8ujgcXJhn9ypzsgr5vlzpPqP+MBBKcGvbg==",
      "license": "MIT"
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
      "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/triple-beam": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/triple-beam/-/triple-beam-1.4.1.tgz",
      "integrity": "sha512-aZbgViZrg1QNcG+LULa7nhZpJTZSLm/mXnHXnbAbjmN5aSa0y7V+wvv6+4WaBtpISJzThKy+PIPxc1Nq1EJ9mg==",
      "license": "MIT",
      "engines": {
        "node": ">= 14.0.0"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/validator": {
      "version": "13.12.0",
      "resolved": "https://registry.npmjs.org/validator/-/validator-13.12.0.tgz",
      "integrity": "sha512-c1Q0mCiPlgdTVVVIJIrBuxNicYE+t/7oKeI9MWLj3fh/uq2Pxh/3eeWbVZ4OcGW1TUf53At0njHw5SMdA3tmMg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/winston": {
      "version": "3.17.0",
      "resolved": "https://registry.npmjs.org/winston/-/winston-3.17.0.tgz",
      "integrity": "sha512-DLiFIXYC5fMPxaRg832S6F5mJYvePtmO5G9v9IgUFPhXm9/GkXarH/TUrBAVzhTCzAj9anE/+GjrgXp/54nOgw==",
      "license": "MIT",
      "dependencies": {
        "@colors/colors": "^1.6.0",
        "@dabh/diagnostics": "^2.0.2",
        "async": "^3.2.3",
        "is-stream": "^2.0.0",
        "logform": "^2.7.0",
        "one-time": "^1.0.0",
        "readable-stream": "^3.4.0",
        "safe-stable-stringify": "^2.3.1",
        "stack-trace": "0.0.x",
        "triple-beam": "^1.3.0",
        "winston-transport": "^4.9.0"
      },
      "engines": {
        "node": ">= 12.0.0"
      }
    },
    "node_modules/winston-transport": {
      "version": "4.9.0",
      "resolved": "https://registry.npmjs.org/winston-transport/-/winston-transport-4.9.0.tgz",
      "integrity": "sha512-8drMJ4rkgaPo1Me4zD/3WLfI/zPdA9o2IipKODunnGDcuqbHwjsbB79ylv04LCGGzU0xQ6vTznOMpQGaLhhm6A==",
      "license": "MIT",
      "dependencies": {
        "logform": "^2.7.0",
        "readable-stream": "^3.6.2",
        "triple-beam": "^1.3.0"
      },
      "engines": {
        "node": ">= 12.0.0"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/yaml": {
      "version": "2.0.0-1",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.0.0-1.tgz",
      "integrity": "sha512-W7h5dEhywMKenDJh2iX/LABkbFnBxasD27oyXWDS/feDsxiw0dD5ncXdYXgkvAsXIY2MpW/ZKkr9IU30DBdMNQ==",
      "license": "ISC",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/z-schema": {
      "version": "5.0.5",
      "resolved": "https://registry.npmjs.org/z-schema/-/z-schema-5.0.5.tgz",
      "integrity": "sha512-D7eujBWkLa3p2sIpJA0d1pr7es+a7m0vFAnZLlCEKq/Ij2k0MLi9Br2UPxoxdYystm5K1yeBGzub0FlYUEWj2Q==",
      "license": "MIT",
      "dependencies": {
        "lodash.get": "^4.4.2",
        "lodash.isequal": "^4.5.0",
        "validator": "^13.7.0"
      },
      "bin": {
        "z-schema": "bin/z-schema"
      },
      "engines": {
        "node": ">=8.0.0"
      },
      "optionalDependencies": {
        "commander": "^9.4.1"
      }
    },
    "node_modules/z-schema/node_modules/commander": {
      "version": "9.5.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-9.5.0.tgz",
      "integrity": "sha512-KRs7WVDKg86PWiuAqhDrAQnTXZKraVcCc6vFdL14qrZ/DcWwuRo7VoiYXalXO7S5GKpqYiVEwCbgFDfxNHKJBQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": "^12.20.0 || >=14"
      }
    }
  }
}

===== package.json =====
{
  "name": "amicus-backend",
  "version": "1.0.0",
  "description": "Backend aplikacji AmicusApp do zarządzania inseminacją i hodowlą",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "express-rate-limit": "^6.7.0",
    "express-validator": "^7.0.1",
    "helmet": "^6.1.5",
    "jsonwebtoken": "^9.0.0",
    "pg": "^8.10.0",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^4.6.2",
    "winston": "^3.8.2"
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  }
}

===== repositories/animalRepository.js =====
const db = require('../config/db');

class AnimalRepository {
  async findById(id) {
    const result = await db.query(
      'SELECT * FROM animals WHERE id = ',
      [id]
    );
    return result.rows[0];
  }

  async findByOwnerId(ownerId, limit = 10, offset = 0) {
    const result = await db.query(
      'SELECT * FROM animals WHERE owner_id =  ORDER BY created_at DESC LIMIT  OFFSET ',
      [ownerId, limit, offset]
    );
    return result.rows;
  }

  async countByOwnerId(ownerId) {
    const result = await db.query(
      'SELECT COUNT(*) FROM animals WHERE owner_id = ',
      [ownerId]
    );
    return parseInt(result.rows[0].count);
  }

  async create(animalData) {
    const { owner_id, animal_number, age, sex, breed, photo } = animalData;
    
    const result = await db.query(
      `INSERT INTO animals 
       (owner_id, animal_number, age, sex, breed, photo) 
       VALUES (, , , , , ) 
       RETURNING *`,
      [owner_id, animal_number, age, sex, breed, photo]
    );
    
    return result.rows[0];
  }

  async update(id, animalData) {
    const { animal_number, age, sex, breed, photo } = animalData;
    
    const result = await db.query(
      `UPDATE animals 
       SET animal_number = , age = , sex = , breed = , photo = 
       WHERE id =  
       RETURNING *`,
      [animal_number, age, sex, breed, photo, id]
    );
    
    return result.rows[0];
  }

  async delete(id) {
    return await db.query('DELETE FROM animals WHERE id = ', [id]);
  }
}

module.exports = new AnimalRepository();

===== repositories/bullRepository.js =====
const db = require('../config/db');

class BullRepository {
  async findById(id) {
    const result = await db.query(
      'SELECT * FROM bulls WHERE id = ',
      [id]
    );
    return result.rows[0];
  }

  async findAll(limit = 100, offset = 0, searchTerm = '') {
    let query = 'SELECT * FROM bulls';
    const params = [];
    
    if (searchTerm) {
      query += ' WHERE identification_number ILIKE  OR breed ILIKE  OR bull_type ILIKE ';
      params.push(`%${searchTerm}%`);
    }
    
    query += ' ORDER BY created_at DESC LIMIT $' + (params.length + 1) + ' OFFSET $' + (params.length + 2);
    params.push(limit, offset);
    
    const result = await db.query(query, params);
    return result.rows;
  }

  async count(searchTerm = '') {
    let query = 'SELECT COUNT(*) FROM bulls';
    const params = [];
    
    if (searchTerm) {
      query += ' WHERE identification_number ILIKE  OR breed ILIKE  OR bull_type ILIKE ';
      params.push(`%${searchTerm}%`);
    }
    
    const result = await db.query(query, params);
    return parseInt(result.rows[0].count);
  }

  async create(bullData) {
    const { 
      identification_number, 
      vet_number, 
      breed, 
      semen_production_date, 
      supplier, 
      bull_type, 
      last_delivery_date, 
      straws_last_delivery, 
      current_straw_count, 
      suggested_price, 
      additional_info,
      favorite,
      vet_id
    } = bullData;
    
    const result = await db.query(
      `INSERT INTO bulls 
       (identification_number, vet_number, breed, semen_production_date, supplier, bull_type, 
        last_delivery_date, straws_last_delivery, current_straw_count, suggested_price, 
        additional_info, favorite, vet_id) 
       VALUES (, , , , , , , , , 0, 1, 2, 3) 
       RETURNING *`,
      [
        identification_number, 
        vet_number, 
        breed, 
        semen_production_date, 
        supplier, 
        bull_type, 
        last_delivery_date, 
        straws_last_delivery, 
        current_straw_count, 
        suggested_price, 
        additional_info,
        favorite || false,
        vet_id
      ]
    );
    
    return result.rows[0];
  }

  async update(id, bullData) {
    const { 
      identification_number, 
      vet_number, 
      breed, 
      semen_production_date, 
      supplier, 
      bull_type, 
      last_delivery_date, 
      straws_last_delivery, 
      current_straw_count, 
      suggested_price, 
      additional_info,
      favorite,
      vet_id
    } = bullData;
    
    const result = await db.query(
      `UPDATE bulls 
       SET identification_number = , vet_number = , breed = , semen_production_date = , 
           supplier = , bull_type = , last_delivery_date = , straws_last_delivery = , 
           current_straw_count = , suggested_price = 0, additional_info = 1, favorite = 2, vet_id = 3
       WHERE id = 4 
       RETURNING *`,
      [
        identification_number, 
        vet_number, 
        breed, 
        semen_production_date, 
        supplier, 
        bull_type, 
        last_delivery_date, 
        straws_last_delivery, 
        current_straw_count, 
        suggested_price, 
        additional_info,
        favorite || false,
        vet_id,
        id
      ]
    );
    
    return result.rows[0];
  }

  async delete(id) {
    return await db.query('DELETE FROM bulls WHERE id = ', [id]);
  }
}

module.exports = new BullRepository();

===== repositories/inseminationRepository.js =====
const db = require('../config/db');

class InseminationRepository {
  async findById(id) {
    const result = await db.query(
      `SELECT ir.*, a.animal_number, a.breed as animal_breed, a.sex, 
              b.identification_number as bull_identification_number, b.breed as bull_breed 
       FROM insemination_register ir
       LEFT JOIN animals a ON ir.animal_id = a.id
       LEFT JOIN bulls b ON ir.bull_id = b.id
       WHERE ir.id = `,
      [id]
    );
    return result.rows[0];
  }

  async findByAnimalId(animalId, limit = 10, offset = 0) {
    const result = await db.query(
      `SELECT ir.*, b.identification_number as bull_identification_number, b.breed as bull_breed
       FROM insemination_register ir
       LEFT JOIN bulls b ON ir.bull_id = b.id
       WHERE ir.animal_id =  
       ORDER BY ir.procedure_date DESC LIMIT  OFFSET `,
      [animalId, limit, offset]
    );
    return result.rows;
  }

  async findByOwnerId(ownerId, limit = 10, offset = 0, filters = {}) {
    let query = `
      SELECT ir.*, a.animal_number, a.breed as animal_breed, 
            b.identification_number as bull_identification_number, b.breed as bull_breed 
      FROM insemination_register ir
      JOIN animals a ON ir.animal_id = a.id
      LEFT JOIN bulls b ON ir.bull_id = b.id
      WHERE ir.owner_id = 
    `;
    
    const queryParams = [ownerId];
    let paramIndex = 2;
    
    if (filters.startDate) {
      query += ` AND ir.procedure_date >= $${paramIndex}`;
      queryParams.push(filters.startDate);
      paramIndex++;
    }
    
    if (filters.endDate) {
      query += ` AND ir.procedure_date <= $${paramIndex}`;
      queryParams.push(filters.endDate);
      paramIndex++;
    }
    
    if (filters.animalId) {
      query += ` AND ir.animal_id = $${paramIndex}`;
      queryParams.push(filters.animalId);
      paramIndex++;
    }
    
    query += ` ORDER BY ir.procedure_date DESC LIMIT $${paramIndex} OFFSET $${paramIndex + 1}`;
    queryParams.push(limit, offset);
    
    const result = await db.query(query, queryParams);
    return result.rows;
  }

  async countByOwnerId(ownerId, filters = {}) {
    let query = `
      SELECT COUNT(*) 
      FROM insemination_register ir
      JOIN animals a ON ir.animal_id = a.id
      WHERE ir.owner_id = 
    `;
    
    const queryParams = [ownerId];
    let paramIndex = 2;
    
    if (filters.startDate) {
      query += ` AND ir.procedure_date >= $${paramIndex}`;
      queryParams.push(filters.startDate);
      paramIndex++;
    }
    
    if (filters.endDate) {
      query += ` AND ir.procedure_date <= $${paramIndex}`;
      queryParams.push(filters.endDate);
      paramIndex++;
    }
    
    if (filters.animalId) {
      query += ` AND ir.animal_id = $${paramIndex}`;
      queryParams.push(filters.animalId);
      paramIndex++;
    }
    
    const result = await db.query(query, queryParams);
    return parseInt(result.rows[0].count);
  }

  async create(inseminationData) {
    const { 
      animal_id, 
      certificate_number, 
      file_number, 
      procedure_number, 
      re_insemination, 
      procedure_date, 
      herd_number, 
      herd_eval_number, 
      dam_owner, 
      ear_tag_number, 
      last_calving_date, 
      name, 
      bull_type, 
      supplier, 
      inseminator, 
      symlek_status, 
      symlek_responsibility,
      owner_id,
      bull_id
    } = inseminationData;
    
    const result = await db.query(
      `INSERT INTO insemination_register 
       (animal_id, certificate_number, file_number, procedure_number, re_insemination, 
        procedure_date, herd_number, herd_eval_number, dam_owner, ear_tag_number, 
        last_calving_date, name, bull_type, supplier, inseminator, symlek_status, 
        symlek_responsibility, owner_id, bull_id) 
       VALUES (, , , , , , , , , 0, 1, 2, 3, 4, 5, 6, 7, 8, 9) 
       RETURNING *`,
      [
        animal_id, 
        certificate_number, 
        file_number, 
        procedure_number, 
        re_insemination, 
        procedure_date, 
        herd_number, 
        herd_eval_number, 
        dam_owner, 
        ear_tag_number, 
        last_calving_date, 
        name, 
        bull_type, 
        supplier, 
        inseminator, 
        symlek_status, 
        symlek_responsibility,
        owner_id,
        bull_id
      ]
    );
    
    return result.rows[0];
  }

  async update(id, inseminationData) {
    const { 
      certificate_number, 
      file_number, 
      procedure_number, 
      re_insemination, 
      procedure_date, 
      herd_number, 
      herd_eval_number, 
      dam_owner, 
      ear_tag_number, 
      last_calving_date, 
      name, 
      bull_type, 
      supplier, 
      inseminator, 
      symlek_status, 
      symlek_responsibility,
      bull_id
    } = inseminationData;
    
    const result = await db.query(
      `UPDATE insemination_register 
       SET certificate_number = , file_number = , procedure_number = , re_insemination = , 
           procedure_date = , herd_number = , herd_eval_number = , dam_owner = , 
           ear_tag_number = , last_calving_date = 0, name = 1, bull_type = 2, 
           supplier = 3, inseminator = 4, symlek_status = 5, symlek_responsibility = 6,
           bull_id = 7
       WHERE id = 8 
       RETURNING *`,
      [
        certificate_number, 
        file_number, 
        procedure_number, 
        re_insemination, 
        procedure_date, 
        herd_number, 
        herd_eval_number, 
        dam_owner, 
        ear_tag_number, 
        last_calving_date, 
        name, 
        bull_type, 
        supplier, 
        inseminator, 
        symlek_status, 
        symlek_responsibility,
        bull_id,
        id
      ]
    );
    
    return result.rows[0];
  }

  async delete(id) {
    return await db.query('DELETE FROM insemination_register WHERE id = ', [id]);
  }
}

module.exports = new InseminationRepository();

===== repositories/keyRepository.js =====
const db = require('../config/db');

class KeyRepository {
  async findByUserId(userId) {
    const result = await db.query(
      'SELECT * FROM user_keys WHERE user_id = ',
      [userId]
    );
    return result.rows[0];
  }

  async create(keyData) {
    const { user_id, public_key, backup_encrypted_private_key } = keyData;
    
    const result = await db.query(
      `INSERT INTO user_keys 
       (user_id, public_key, backup_encrypted_private_key) 
       VALUES (, , ) 
       RETURNING *`,
      [user_id, public_key, backup_encrypted_private_key]
    );
    
    return result.rows[0];
  }

  async update(userId, keyData) {
    const { public_key, backup_encrypted_private_key } = keyData;
    
    const result = await db.query(
      `UPDATE user_keys 
       SET public_key = , backup_encrypted_private_key = 
       WHERE user_id =  
       RETURNING *`,
      [public_key, backup_encrypted_private_key, userId]
    );
    
    return result.rows[0];
  }
}

module.exports = new KeyRepository();

===== repositories/organizationRepository.js =====
const db = require('../config/db');

class OrganizationRepository {
  async findById(id) {
    const result = await db.query(
      'SELECT * FROM organizations WHERE id = ',
      [id]
    );
    return result.rows[0];
  }

  async create(organizationData) {
    const { name, street, house_number, city, postal_code, tax_id } = organizationData;
    
    const result = await db.query(
      `INSERT INTO organizations 
       (name, street, house_number, city, postal_code, tax_id, created_at, updated_at) 
       VALUES (, , , , , , NOW(), NOW()) 
       RETURNING *`,
      [name, street, house_number, city, postal_code, tax_id]
    );
    
    return result.rows[0];
  }

  async addUserToOrganization(organizationId, userId, role = 'member') {
    const result = await db.query(
      `INSERT INTO organization_user 
       (organization_id, user_id, role, created_at, updated_at) 
       VALUES (, , , NOW(), NOW()) 
       RETURNING *`,
      [organizationId, userId, role]
    );
    
    return result.rows[0];
  }

  async getUserOrganizations(userId) {
    const result = await db.query(
      `SELECT o.* FROM organizations o 
       JOIN organization_user ou ON o.id = ou.organization_id 
       WHERE ou.user_id = `,
      [userId]
    );
    
    return result.rows;
  }

  async getUserRole(organizationId, userId) {
    const result = await db.query(
      `SELECT role FROM organization_user 
       WHERE organization_id =  AND user_id = `,
      [organizationId, userId]
    );
    
    return result.rows[0]?.role;
  }
}

module.exports = new OrganizationRepository();

===== repositories/userRepository.js =====
const { query } = require('../config/db');

// Funkcje repozytorium użytkowników
async function findById(id) {
  const result = await query('SELECT * FROM users WHERE id = $1', [id]);
  return result.rows[0];
}

async function findByEmail(email) {
  const result = await query('SELECT * FROM users WHERE email = $1', [email]);
  console.log("[REPO] Znaleziono użytkownika:", !!result.rows[0]);
  return result.rows[0];
}

async function create(userData) {
  const { email, password, first_name, last_name, phone, street, house_number, city, postal_code, tax_id } = userData;
  
  const result = await query(
    `INSERT INTO users (
      email, password, first_name, last_name, phone, street, 
      house_number, city, postal_code, tax_id, status, created_at, updated_at
    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) RETURNING *`,
    [
      email, password, first_name, last_name, phone, street, 
      house_number, city, postal_code, tax_id, 'active', new Date(), new Date()
    ]
  );
  
  return result.rows[0];
}

async function updateUser(id, userData) {
  const { email, first_name, last_name, phone, street, house_number, city, postal_code, tax_id } = userData;
  
  const result = await query(
    `UPDATE users SET 
      email = $1, first_name = $2, last_name = $3, phone = $4, 
      street = $5, house_number = $6, city = $7, postal_code = $8, 
      tax_id = $9, updated_at = $10
    WHERE id = $11 RETURNING *`,
    [
      email, first_name, last_name, phone, street, 
      house_number, city, postal_code, tax_id, new Date(), id
    ]
  );
  
  return result.rows[0];
}

async function updatePassword(id, password) {
  const result = await query(
    'UPDATE users SET password = $1, updated_at = $2 WHERE id = $3 RETURNING *',
    [password, new Date(), id]
  );
  
  return result.rows[0];
}

async function getAllUsers() {
  const result = await query('SELECT * FROM users ORDER BY created_at DESC');
  return result.rows;
}

// Dostarczamy obydwie wersje nazw metod dla kompatybilności
module.exports = {
  getUserById: findById,
  getUserByEmail: findByEmail,
  findById,
  findByEmail,
  create,
  updateUser,
  updatePassword,
  getAllUsers
};

===== repositories/visitRepository.js =====
const db = require('../config/db');

class VisitRepository {
  async findById(id) {
    const result = await db.query(
      `SELECT v.*, 
              f.first_name as farmer_first_name, f.last_name as farmer_last_name,
              vt.first_name as vet_first_name, vt.last_name as vet_last_name,
              e.first_name as employee_first_name, e.last_name as employee_last_name
       FROM visits v
       JOIN users f ON v.farmer_id = f.id
       LEFT JOIN users vt ON v.vet_id = vt.id
       LEFT JOIN users e ON v.employee_id = e.id
       WHERE v.id = `,
      [id]
    );
    return result.rows[0];
  }

  async findByFarmerId(farmerId, limit = 10, offset = 0) {
    const result = await db.query(
      `SELECT v.*, 
              vt.first_name as vet_first_name, vt.last_name as vet_last_name,
              e.first_name as employee_first_name, e.last_name as employee_last_name
       FROM visits v
       LEFT JOIN users vt ON v.vet_id = vt.id
       LEFT JOIN users e ON v.employee_id = e.id
       WHERE v.farmer_id =  
       ORDER BY v.visit_date DESC LIMIT  OFFSET `,
      [farmerId, limit, offset]
    );
    return result.rows;
  }

  async findByVetId(vetId, limit = 10, offset = 0) {
    const result = await db.query(
      `SELECT v.*, 
              f.first_name as farmer_first_name, f.last_name as farmer_last_name,
              e.first_name as employee_first_name, e.last_name as employee_last_name
       FROM visits v
       JOIN users f ON v.farmer_id = f.id
       LEFT JOIN users e ON v.employee_id = e.id
       WHERE v.vet_id =  
       ORDER BY v.visit_date DESC LIMIT  OFFSET `,
      [vetId, limit, offset]
    );
    return result.rows;
  }

  async countByFarmerId(farmerId) {
    const result = await db.query(
      'SELECT COUNT(*) FROM visits WHERE farmer_id = ',
      [farmerId]
    );
    return parseInt(result.rows[0].count);
  }

  async countByVetId(vetId) {
    const result = await db.query(
      'SELECT COUNT(*) FROM visits WHERE vet_id = ',
      [vetId]
    );
    return parseInt(result.rows[0].count);
  }

  async create(visitData) {
    const { farmer_id, vet_id, visit_date, description, status, employee_id, channel } = visitData;
    
    const result = await db.query(
      `INSERT INTO visits 
       (farmer_id, vet_id, visit_date, description, status, employee_id, channel) 
       VALUES (, , , , , , ) 
       RETURNING *`,
      [farmer_id, vet_id, visit_date, description, status, employee_id, channel]
    );
    
    return result.rows[0];
  }

  async update(id, visitData) {
    const { visit_date, description, status, vet_id, employee_id, channel } = visitData;
    
    const result = await db.query(
      `UPDATE visits 
       SET visit_date = , description = , status = , vet_id = , employee_id = , channel = 
       WHERE id =  
       RETURNING *`,
      [visit_date, description, status, vet_id, employee_id, channel, id]
    );
    
    return result.rows[0];
  }

  async delete(id) {
    return await db.query('DELETE FROM visits WHERE id = ', [id]);
  }
}

module.exports = new VisitRepository();

===== reset-password.js =====
const bcrypt = require('bcryptjs');
const { pool } = require('./config/db');

async function resetPassword() {
  try {
    const email = 'admin@example.com';
    const newPassword = 'Admin123';
    
    // Tworzymy hash hasła
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(newPassword, salt);
    
    // Aktualizujemy hasło
    const result = await pool.query(
      'UPDATE users SET password = $1, updated_at = $2 WHERE email = $3 RETURNING *',
      [hashedPassword, new Date(), email]
    );
    
    if (result.rows.length > 0) {
      console.log(`Hasło zostało zresetowane dla użytkownika: ${email}`);
      console.log('Nowe dane logowania:');
      console.log(`Email: ${email}`);
      console.log(`Hasło: ${newPassword}`);
    } else {
      console.log(`Użytkownik ${email} nie został znaleziony`);
    }
  } catch (error) {
    console.error('Błąd resetowania hasła:', error);
  } finally {
    pool.end();
  }
}

resetPassword();

===== routes/animalRoutes.js =====
const express = require('express');
const animalController = require('../controllers/animalController');
const { verifyToken } = require('../middleware/authMiddleware');
const { animalValidator } = require('../middleware/validator');

const router = express.Router();

// Wszystkie trasy wymagają uwierzytelnienia
router.use(verifyToken);

/**
 * @swagger
 * /api/animals:
 *   get:
 *     summary: Pobieranie zwierząt użytkownika
 *     tags: [Animals]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *         description: Numer strony (domyślnie 1)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: Liczba elementów na stronie (domyślnie 10)
 *     responses:
 *       200:
 *         description: Lista zwierząt
 *       401:
 *         description: Brak autentykacji
 */
router.get('/', animalController.getUserAnimals);

/**
 * @swagger
 * /api/animals:
 *   post:
 *     summary: Tworzenie nowego zwierzęcia
 *     tags: [Animals]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - animal_number
 *             properties:
 *               animal_number:
 *                 type: string
 *               age:
 *                 type: integer
 *               sex:
 *                 type: string
 *                 enum: [male, female]
 *               breed:
 *                 type: string
 *               photo:
 *                 type: string
 *     responses:
 *       201:
 *         description: Zwierzę utworzone
 *       400:
 *         description: Błędne dane wejściowe
 *       401:
 *         description: Brak autentykacji
 */
router.post('/', animalValidator, animalController.createAnimal);

/**
 * @swagger
 * /api/animals/{id}:
 *   get:
 *     summary: Pobieranie szczegółów zwierzęcia
 *     tags: [Animals]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Szczegóły zwierzęcia
 *       401:
 *         description: Brak autentykacji
 *       403:
 *         description: Brak dostępu
 *       404:
 *         description: Zwierzę nie znalezione
 */
router.get('/:id', animalController.getAnimal);

/**
 * @swagger
 * /api/animals/{id}:
 *   put:
 *     summary: Aktualizacja zwierzęcia
 *     tags: [Animals]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               animal_number:
 *                 type: string
 *               age:
 *                 type: integer
 *               sex:
 *                 type: string
 *                 enum: [male, female]
 *               breed:
 *                 type: string
 *               photo:
 *                 type: string
 *     responses:
 *       200:
 *         description: Zwierzę zaktualizowane
 *       400:
 *         description: Błędne dane wejściowe
 *       401:
 *         description: Brak autentykacji
 *       403:
 *         description: Brak dostępu
 *       404:
 *         description: Zwierzę nie znalezione
 */
router.put('/:id', animalController.updateAnimal);

/**
 * @swagger
 * /api/animals/{id}:
 *   delete:
 *     summary: Usuwanie zwierzęcia
 *     tags: [Animals]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Zwierzę usunięte
 *       401:
 *         description: Brak autentykacji
 *       403:
 *         description: Brak dostępu
 *       404:
 *         description: Zwierzę nie znalezione
 */
router.delete('/:id', animalController.deleteAnimal);

module.exports = router;

===== routes/authRoutes.js =====
const express = require('express');
const authController = require('../controllers/authController');
const { authLimiter } = require('../middleware/rateLimiter');
const { registerValidator, loginValidator } = require('../middleware/validator');
const { verifyToken } = require('../middleware/authMiddleware');

const router = express.Router();

// Ograniczanie liczby prób logowania i rejestracji
router.use(authLimiter);

/**
 * @swagger
 * /api/auth/register:
 *   post:
 *     summary: Rejestracja nowego użytkownika
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *               - first_name
 *               - last_name
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *               first_name:
 *                 type: string
 *               last_name:
 *                 type: string
 *               phone:
 *                 type: string
 *               street:
 *                 type: string
 *               house_number:
 *                 type: string
 *               city:
 *                 type: string
 *               postal_code:
 *                 type: string
 *               tax_id:
 *                 type: string
 *               organization:
 *                 type: object
 *                 properties:
 *                   name:
 *                     type: string
 *                   street:
 *                     type: string
 *     responses:
 *       201:
 *         description: Użytkownik zarejestrowany
 *       400:
 *         description: Błędne dane wejściowe
 */
router.post('/register', registerValidator, authController.register);

/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: Logowanie użytkownika
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *             properties:
 *               email:
 *                 type: string
 *               password:
 *                 type: string
 *     responses:
 *       200:
 *         description: Zalogowano pomyślnie
 *       401:
 *         description: Nieprawidłowe dane logowania
 */
router.post('/login', loginValidator, authController.login);

/**
 * @swagger
 * /api/auth/me:
 *   get:
 *     summary: Pobieranie profilu zalogowanego użytkownika
 *     tags: [Auth]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Profil zalogowanego użytkownika
 *       401:
 *         description: Brak autentykacji
 */
router.get('/me', verifyToken, authController.getMe);

module.exports = router;

===== routes/bullRoutes.js =====
const express = require('express');
const bullController = require('../controllers/bullController');
const { verifyToken } = require('../middleware/authMiddleware');

const router = express.Router();

// Wszystkie trasy wymagają uwierzytelnienia
router.use(verifyToken);

/**
 * @swagger
 * /api/bulls:
 *   get:
 *     summary: Pobieranie listy byków
 *     tags: [Bulls]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *         description: Numer strony (domyślnie 1)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: Liczba elementów na stronie (domyślnie 10)
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: Szukana fraza
 *     responses:
 *       200:
 *         description: Lista byków
 *       401:
 *         description: Brak autentykacji
 */
router.get('/', bullController.getAllBulls);

/**
 * @swagger
 * /api/bulls:
 *   post:
 *     summary: Tworzenie nowego byka
 *     tags: [Bulls]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - identification_number
 *             properties:
 *               identification_number:
 *                 type: string
 *               vet_number:
 *                 type: string
 *               breed:
 *                 type: string
 *               semen_production_date:
 *                 type: string
 *                 format: date
 *               supplier:
 *                 type: string
 *               bull_type:
 *                 type: string
 *               last_delivery_date:
 *                 type: string
 *                 format: date
 *               straws_last_delivery:
 *                 type: integer
 *               current_straw_count:
 *                 type: integer
 *               suggested_price:
 *                 type: number
 *               additional_info:
 *                 type: string
 *               favorite:
 *                 type: boolean
 *               vet_id:
 *                 type: integer
 *     responses:
 *       201:
 *         description: Byk utworzony
 *       400:
 *         description: Błędne dane wejściowe
 *       401:
 *         description: Brak autentykacji
 */
router.post('/', bullController.createBull);

/**
 * @swagger
 * /api/bulls/{id}:
 *   get:
 *     summary: Pobieranie szczegółów byka
 *     tags: [Bulls]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Szczegóły byka
 *       401:
 *         description: Brak autentykacji
 *       404:
 *         description: Byk nie znaleziony
 */
router.get('/:id', bullController.getBull);

/**
 * @swagger
 * /api/bulls/{id}:
 *   put:
 *     summary: Aktualizacja byka
 *     tags: [Bulls]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               identification_number:
 *                 type: string
 *               vet_number:
 *                 type: string
 *               breed:
 *                 type: string
 *               semen_production_date:
 *                 type: string
 *                 format: date
 *               supplier:
 *                 type: string
 *               bull_type:
 *                 type: string
 *               last_delivery_date:
 *                 type: string
 *                 format: date
 *               straws_last_delivery:
 *                 type: integer
 *               current_straw_count:
 *                 type: integer
 *               suggested_price:
 *                 type: number
 *               additional_info:
 *                 type: string
 *               favorite:
 *                 type: boolean
 *               vet_id:
 *                 type: integer
 *     responses:
 *       200:
 *         description: Byk zaktualizowany
 *       400:
 *         description: Błędne dane wejściowe
 *       401:
 *         description: Brak autentykacji
 *       404:
 *         description: Byk nie znaleziony
 */
router.put('/:id', bullController.updateBull);

/**
 * @swagger
 * /api/bulls/{id}:
 *   delete:
 *     summary: Usuwanie byka
 *     tags: [Bulls]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Byk usunięty
 *       401:
 *         description: Brak autentykacji
 *       404:
 *         description: Byk nie znaleziony
 */
router.delete('/:id', bullController.deleteBull);

module.exports = router;

===== routes/inseminationRoutes.js =====
const express = require('express');
const inseminationController = require('../controllers/inseminationController');
const { verifyToken } = require('../middleware/authMiddleware');
const { inseminationValidator } = require('../middleware/validator');

const router = express.Router();

// Wszystkie trasy wymagają uwierzytelnienia
router.use(verifyToken);

/**
 * @swagger
 * /api/inseminations:
 *   get:
 *     summary: Pobieranie inseminacji użytkownika
 *     tags: [Inseminations]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *         description: Numer strony (domyślnie 1)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: Liczba elementów na stronie (domyślnie 10)
 *       - in: query
 *         name: startDate
 *         schema:
 *           type: string
 *           format: date
 *         description: Data początkowa filtrowania
 *       - in: query
 *         name: endDate
 *         schema:
 *           type: string
 *           format: date
 *         description: Data końcowa filtrowania
 *       - in: query
 *         name: animalId
 *         schema:
 *           type: integer
 *         description: ID zwierzęcia do filtrowania
 *     responses:
 *       200:
 *         description: Lista inseminacji
 *       401:
 *         description: Brak autentykacji
 */
router.get('/', inseminationController.getUserInseminations);

/**
 * @swagger
 * /api/inseminations:
 *   post:
 *     summary: Tworzenie nowej inseminacji
 *     tags: [Inseminations]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - animal_id
 *               - certificate_number
 *               - file_number
 *               - procedure_number
 *               - procedure_date
 *             properties:
 *               animal_id:
 *                 type: integer
 *               certificate_number:
 *                 type: string
 *               file_number:
 *                 type: string
 *               procedure_number:
 *                 type: string
 *               re_insemination:
 *                 type: string
 *               procedure_date:
 *                 type: string
 *                 format: date
 *               herd_number:
 *                 type: string
 *               herd_eval_number:
 *                 type: string
 *               dam_owner:
 *                 type: string
 *               ear_tag_number:
 *                 type: string
 *               last_calving_date:
 *                 type: string
 *                 format: date
 *               name:
 *                 type: string
 *               bull_type:
 *                 type: string
 *               supplier:
 *                 type: string
 *               inseminator:
 *                 type: string
 *               symlek_status:
 *                 type: string
 *               symlek_responsibility:
 *                 type: string
 *               bull_id:
 *                 type: integer
 *     responses:
 *       201:
 *         description: Inseminacja utworzona
 *       400:
 *         description: Błędne dane wejściowe
 *       401:
 *         description: Brak autentykacji
 */
router.post('/', inseminationValidator, inseminationController.createInsemination);

/**
 * @swagger
 * /api/inseminations/animal/{animalId}:
 *   get:
 *     summary: Pobieranie inseminacji dla określonego zwierzęcia
 *     tags: [Inseminations]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: animalId
 *         required: true
 *         schema:
 *           type: integer
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *         description: Numer strony (domyślnie 1)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: Liczba elementów na stronie (domyślnie 10)
 *     responses:
 *       200:
 *         description: Lista inseminacji zwierzęcia
 *       401:
 *         description: Brak autentykacji
 *       403:
 *         description: Brak dostępu
 *       404:
 *         description: Zwierzę nie znalezione
 */
router.get('/animal/:animalId', inseminationController.getAnimalInseminations);

/**
 * @swagger
 * /api/inseminations/{id}:
 *   get:
 *     summary: Pobieranie szczegółów inseminacji
 *     tags: [Inseminations]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Szczegóły inseminacji
 *       401:
 *         description: Brak autentykacji
 *       403:
 *         description: Brak dostępu
 *       404:
 *         description: Inseminacja nie znaleziona
 */
router.get('/:id', inseminationController.getInsemination);

/**
 * @swagger
 * /api/inseminations/{id}:
 *   put:
 *     summary: Aktualizacja inseminacji
 *     tags: [Inseminations]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               certificate_number:
 *                 type: string
 *               file_number:
 *                 type: string
 *               procedure_number:
 *                 type: string
 *               re_insemination:
 *                 type: string
 *               procedure_date:
 *                 type: string
 *                 format: date
 *               herd_number:
 *                 type: string
 *               herd_eval_number:
 *                 type: string
 *               dam_owner:
 *                 type: string
 *               ear_tag_number:
 *                 type: string
 *               last_calving_date:
 *                 type: string
 *                 format: date
 *               name:
 *                 type: string
 *               bull_type:
 *                 type: string
 *               supplier:
 *                 type: string
 *               inseminator:
 *                 type: string
 *               symlek_status:
 *                 type: string
 *               symlek_responsibility:
 *                 type: string
 *               bull_id:
 *                 type: integer
 *     responses:
 *       200:
 *         description: Inseminacja zaktualizowana
 *       400:
 *         description: Błędne dane wejściowe
 *       401:
 *         description: Brak autentykacji
 *       403:
 *         description: Brak dostępu
 *       404:
 *         description: Inseminacja nie znaleziona
 */
router.put('/:id', inseminationController.updateInsemination);

/**
 * @swagger
 * /api/inseminations/{id}:
 *   delete:
 *     summary: Usuwanie inseminacji
 *     tags: [Inseminations]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Inseminacja usunięta
 *       401:
 *         description: Brak autentykacji
 *       403:
 *         description: Brak dostępu
 *       404:
 *         description: Inseminacja nie znaleziona
 */
router.delete('/:id', inseminationController.deleteInsemination);

module.exports = router;

===== routes/keyRoutes.js =====
const express = require('express');
const keyController = require('../controllers/keyController');
const { verifyToken } = require('../middleware/authMiddleware');

const router = express.Router();

// Wszystkie trasy wymagają uwierzytelnienia
router.use(verifyToken);

/**
 * @swagger
 * /api/keys:
 *   get:
 *     summary: Pobieranie klucza użytkownika
 *     tags: [Keys]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Klucz użytkownika
 *       401:
 *         description: Brak autentykacji
 *       404:
 *         description: Klucz nie znaleziony
 */
router.get('/', keyController.getUserKey);

/**
 * @swagger
 * /api/keys:
 *   post:
 *     summary: Tworzenie lub aktualizacja klucza użytkownika
 *     tags: [Keys]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - public_key
 *             properties:
 *               public_key:
 *                 type: string
 *               backup_encrypted_private_key:
 *                 type: string
 *     responses:
 *       200:
 *         description: Klucz utworzony/zaktualizowany
 *       400:
 *         description: Błędne dane wejściowe
 *       401:
 *         description: Brak autentykacji
 */
router.post('/', keyController.createOrUpdateUserKey);

module.exports = router;

===== routes/organizationRoutes.js =====
const express = require('express');
const organizationController = require('../controllers/organizationController');
const { verifyToken } = require('../middleware/authMiddleware');

const router = express.Router();

// Wszystkie trasy wymagają uwierzytelnienia
router.use(verifyToken);

/**
 * @swagger
 * /api/organizations:
 *   get:
 *     summary: Pobieranie organizacji użytkownika
 *     tags: [Organizations]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Lista organizacji
 *       401:
 *         description: Brak autentykacji
 */
router.get('/', organizationController.getUserOrganizations);

/**
 * @swagger
 * /api/organizations:
 *   post:
 *     summary: Tworzenie nowej organizacji
 *     tags: [Organizations]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *             properties:
 *               name:
 *                 type: string
 *               street:
 *                 type: string
 *               house_number:
 *                 type: string
 *               city:
 *                 type: string
 *               postal_code:
 *                 type: string
 *               tax_id:
 *                 type: string
 *     responses:
 *       201:
 *         description: Organizacja utworzona
 *       400:
 *         description: Błędne dane wejściowe
 *       401:
 *         description: Brak autentykacji
 */
router.post('/', organizationController.createOrganization);

/**
 * @swagger
 * /api/organizations/{id}:
 *   get:
 *     summary: Pobieranie szczegółów organizacji
 *     tags: [Organizations]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Szczegóły organizacji
 *       401:
 *         description: Brak autentykacji
 *       403:
 *         description: Brak dostępu
 *       404:
 *         description: Organizacja nie znaleziona
 */
router.get('/:id', organizationController.getOrganization);

/**
 * @swagger
 * /api/organizations/users:
 *   post:
 *     summary: Dodawanie użytkownika do organizacji
 *     tags: [Organizations]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - organizationId
 *               - userId
 *             properties:
 *               organizationId:
 *                 type: integer
 *               userId:
 *                 type: integer
 *               role:
 *                 type: string
 *                 enum: [admin, member]
 *                 default: member
 *     responses:
 *       201:
 *         description: Użytkownik dodany do organizacji
 *       401:
 *         description: Brak autentykacji
 *       403:
 *         description: Brak uprawnień
 *       404:
 *         description: Organizacja lub użytkownik nie znaleziony
 */
router.post('/users', organizationController.addUserToOrganization);

module.exports = router;

===== routes/userRoutes.js =====
const express = require('express');
const userController = require('../controllers/userController');
const { verifyToken } = require('../middleware/authMiddleware');

const router = express.Router();

// Wszystkie trasy wymagają uwierzytelnienia
router.use(verifyToken);

/**
 * @swagger
 * /api/users/profile:
 *   get:
 *     summary: Pobieranie profilu użytkownika
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Profil użytkownika
 *       401:
 *         description: Brak autentykacji
 */
router.get('/profile', userController.getProfile);

/**
 * @swagger
 * /api/users/profile:
 *   put:
 *     summary: Aktualizacja profilu użytkownika
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               first_name:
 *                 type: string
 *               last_name:
 *                 type: string
 *               phone:
 *                 type: string
 *     responses:
 *       200:
 *         description: Profil zaktualizowany
 *       400:
 *         description: Błędne dane wejściowe
 *       401:
 *         description: Brak autentykacji
 */
router.put('/profile', userController.updateProfile);

/**
 * @swagger
 * /api/users/change-password:
 *   post:
 *     summary: Zmiana hasła użytkownika
 *     tags: [Users]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - current_password
 *               - new_password
 *             properties:
 *               current_password:
 *                 type: string
 *               new_password:
 *                 type: string
 *     responses:
 *       200:
 *         description: Hasło zmienione
 *       400:
 *         description: Błędne dane wejściowe
 *       401:
 *         description: Brak autentykacji lub nieprawidłowe hasło
 */
router.post('/change-password', userController.changePassword);

module.exports = router;

===== routes/visitRoutes.js =====
const express = require('express');
const visitController = require('../controllers/visitController');
const { verifyToken } = require('../middleware/authMiddleware');

const router = express.Router();

// Wszystkie trasy wymagają uwierzytelnienia
router.use(verifyToken);

/**
 * @swagger
 * /api/visits:
 *   get:
 *     summary: Pobieranie wizyt zalogowanego rolnika
 *     tags: [Visits]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *         description: Numer strony (domyślnie 1)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: Liczba elementów na stronie (domyślnie 10)
 *     responses:
 *       200:
 *         description: Lista wizyt
 *       401:
 *         description: Brak autentykacji
 */
router.get('/', visitController.getFarmerVisits);

/**
 * @swagger
 * /api/visits/vet:
 *   get:
 *     summary: Pobieranie wizyt zalogowanego weterynarza
 *     tags: [Visits]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *         description: Numer strony (domyślnie 1)
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *         description: Liczba elementów na stronie (domyślnie 10)
 *     responses:
 *       200:
 *         description: Lista wizyt
 *       401:
 *         description: Brak autentykacji
 */
router.get('/vet', visitController.getVetVisits);

/**
 * @swagger
 * /api/visits:
 *   post:
 *     summary: Tworzenie nowej wizyty
 *     tags: [Visits]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - farmer_id
 *               - visit_date
 *             properties:
 *               farmer_id:
 *                 type: integer
 *               vet_id:
 *                 type: integer
 *               visit_date:
 *                 type: string
 *                 format: date-time
 *               description:
 *                 type: string
 *               status:
 *                 type: string
 *                 enum: [Scheduled, Confirmed, Completed, Cancelled]
 *               employee_id:
 *                 type: integer
 *               channel:
 *                 type: string
 *                 enum: [In-person, Phone, Video]
 *     responses:
 *       201:
 *         description: Wizyta utworzona
 *       400:
 *         description: Błędne dane wejściowe
 *       401:
 *         description: Brak autentykacji
 */
router.post('/', visitController.createVisit);

/**
 * @swagger
 * /api/visits/{id}:
 *   get:
 *     summary: Pobieranie szczegółów wizyty
 *     tags: [Visits]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Szczegóły wizyty
 *       401:
 *         description: Brak autentykacji
 *       403:
 *         description: Brak dostępu
 *       404:
 *         description: Wizyta nie znaleziona
 */
router.get('/:id', visitController.getVisit);

/**
 * @swagger
 * /api/visits/{id}:
 *   put:
 *     summary: Aktualizacja wizyty
 *     tags: [Visits]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               visit_date:
 *                 type: string
 *                 format: date-time
 *               description:
 *                 type: string
 *               status:
 *                 type: string
 *                 enum: [Scheduled, Confirmed, Completed, Cancelled]
 *               vet_id:
 *                 type: integer
 *               employee_id:
 *                 type: integer
 *               channel:
 *                 type: string
 *                 enum: [In-person, Phone, Video]
 *     responses:
 *       200:
 *         description: Wizyta zaktualizowana
 *       400:
 *         description: Błędne dane wejściowe
 *       401:
 *         description: Brak autentykacji
 *       403:
 *         description: Brak dostępu
 *       404:
 *         description: Wizyta nie znaleziona
 */
router.put('/:id', visitController.updateVisit);

/**
 * @swagger
 * /api/visits/{id}:
 *   delete:
 *     summary: Usuwanie wizyty
 *     tags: [Visits]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Wizyta usunięta
 *       401:
 *         description: Brak autentykacji
 *       403:
 *         description: Brak dostępu
 *       404:
 *         description: Wizyta nie znaleziona
 */
router.delete('/:id', visitController.deleteVisit);

module.exports = router;

===== server.js =====
const app = require('./app');

const PORT = process.env.PORT || 4000;

app.listen(PORT, () => {
  console.log(`Serwer uruchomiony na porcie ${PORT}`);
  console.log(`Dokumentacja API dostępna pod adresem http://localhost:${PORT}/api-docs`);
});

===== server.js.bak =====
const app = require('./app');

const PORT = process.env.PORT || 4000;

app.listen(PORT, () => {
  console.log(`Serwer uruchomiony na porcie ${PORT}`);
  console.log(`Dokumentacja API dostępna pod adresem http://localhost:${PORT}/api-docs`);
});

===== services/animalService.js =====
const animalRepository = require('../repositories/animalRepository');

class AnimalService {
  async getAnimal(animalId) {
    const animal = await animalRepository.findById(animalId);
    if (!animal) {
      throw new Error('Zwierzę nie znalezione');
    }
    return animal;
  }

  async getOwnerAnimals(ownerId, page = 1, limit = 10) {
    const offset = (page - 1) * limit;
    
    const animals = await animalRepository.findByOwnerId(ownerId, limit, offset);
    const totalCount = await animalRepository.countByOwnerId(ownerId);
    
    return {
      animals,
      pagination: {
        page,
        limit,
        totalCount,
        totalPages: Math.ceil(totalCount / limit)
      }
    };
  }

  async createAnimal(animalData) {
    return await animalRepository.create(animalData);
  }

  async updateAnimal(animalId, animalData) {
    const animal = await animalRepository.findById(animalId);
    if (!animal) {
      throw new Error('Zwierzę nie znalezione');
    }
    
    return await animalRepository.update(animalId, animalData);
  }

  async deleteAnimal(animalId) {
    const animal = await animalRepository.findById(animalId);
    if (!animal) {
      throw new Error('Zwierzę nie znalezione');
    }
    
    await animalRepository.delete(animalId);
    return { success: true, message: 'Zwierzę zostało usunięte' };
  }
}

module.exports = new AnimalService();

===== services/authService.js =====
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const userRepository = require('../repositories/userRepository');
const organizationRepository = require('../repositories/organizationRepository');

class AuthService {
  async register(userData, organizationData = null) {
    // Sprawdź, czy użytkownik o takim emailu już istnieje
    const existingUser = await userRepository.findByEmail(userData.email);
    if (existingUser) {
      throw new Error('Użytkownik o takim adresie email już istnieje');
    }

    // Hashuj hasło
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(userData.password, salt);
    
    // Zastąp hasło jawne hashem
    userData.password = hashedPassword;

    // Utwórz użytkownika
    const newUser = await userRepository.create(userData);

    let organizationResult = null;
    
    // Jeśli przekazano dane organizacji, utwórz ją i przypisz użytkownika jako administratora
    if (organizationData && organizationData.name) {
      const newOrganization = await organizationRepository.create(organizationData);
      await organizationRepository.addUserToOrganization(newOrganization.id, newUser.id, 'admin');
      organizationResult = newOrganization;
    }

    // Generuj token JWT
    const token = this.generateToken(newUser.id);

    return {
      user: newUser,
      organization: organizationResult,
      token
    };
  }

  async login(email, password) {
    console.log('[AUTH] Rozpoczęcie logowania dla:', email);
    
    try {
      // Znajdź użytkownika
      console.log('[AUTH] Szukanie użytkownika w bazie...');
      const user = await userRepository.findByEmail(email);
      
      if (!user) {
        console.log('[AUTH] ❌ Użytkownik nie znaleziony');
        throw new Error('Nieprawidłowe dane logowania');
      }
      
      console.log('[AUTH] ✅ Użytkownik znaleziony, ID:', user.id);

      // Sprawdź hasło
      console.log('[AUTH] Weryfikacja hasła...');
      const isPasswordValid = await bcrypt.compare(password, user.password);
      
      if (!isPasswordValid) {
        console.log('[AUTH] ❌ Nieprawidłowe hasło');
        throw new Error('Nieprawidłowe dane logowania');
      }
      
      console.log('[AUTH] ✅ Hasło zweryfikowane poprawnie');

      // Pobierz organizacje użytkownika
      console.log('[AUTH] Pobieranie organizacji użytkownika...');
      let organizations = [];
      try {
        organizations = await organizationRepository.getUserOrganizations(user.id);
        console.log('[AUTH] ✅ Pobrano organizacje:', organizations.length);
      } catch (orgError) {
        console.log('[AUTH] ⚠️ Błąd podczas pobierania organizacji:', orgError.message);
        // Kontynuuj mimo błędu organizacji
        organizations = [];
      }

      // Generuj token JWT
      console.log('[AUTH] Generowanie tokenu JWT...');
      const token = this.generateToken(user.id);
      console.log('[AUTH] ✅ Token wygenerowany');

      // Usuń hasło z danych użytkownika przed zwróceniem
      const userToReturn = { ...user };
      delete userToReturn.password;
      
      console.log('[AUTH] 🎉 Logowanie zakończone sukcesem');
      return {
        user: userToReturn,
        organizations,
        token
      };
    } catch (error) {
      console.log('[AUTH] ❌ Błąd podczas logowania:', error.message);
      throw error;
    }
  }

  generateToken(userId) {
    return jwt.sign(
      { id: userId },
      process.env.JWT_SECRET || 'amicus_default_secret',
      { expiresIn: process.env.JWT_EXPIRES_IN || '7d' }
    );
  }

  async getUserProfile(userId) {
    const user = await userRepository.findById(userId);
    if (!user) {
      throw new Error('Użytkownik nie znaleziony');
    }

    // Pobierz organizacje użytkownika
    const organizations = await organizationRepository.getUserOrganizations(userId);

    // Usuń hasło z obiektu użytkownika
    const userToReturn = { ...user };
    delete userToReturn.password;
    
    return {
      user: userToReturn,
      organizations
    };
  }
}

module.exports = new AuthService();

===== services/authService.js.bak =====
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const userRepository = require('../repositories/userRepository');
const organizationRepository = require('../repositories/organizationRepository');

class AuthService {
  async register(userData, organizationData = null) {
    // Sprawdź, czy użytkownik o takim emailu już istnieje
    const existingUser = await userRepository.findByEmail(userData.email);
    if (existingUser) {
      throw new Error('Użytkownik o takim adresie email już istnieje');
    }

    // Hashuj hasło
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(userData.password, salt);
    
    // Zastąp hasło jawne hashem
    userData.password = hashedPassword;

    // Transakcję możemy dodać w przyszłości, jeśli potrzeba

    // Utwórz użytkownika
    const newUser = await userRepository.create(userData);

    let organizationResult = null;
    
    // Jeśli przekazano dane organizacji, utwórz ją i przypisz użytkownika jako administratora
    if (organizationData && organizationData.name) {
      const newOrganization = await organizationRepository.create(organizationData);
      await organizationRepository.addUserToOrganization(newOrganization.id, newUser.id, 'admin');
      organizationResult = newOrganization;
    }

    // Generuj token JWT
    const token = this.generateToken(newUser.id);

    return {
      user: newUser,
      organization: organizationResult,
      token
    };
  }

  async login(email, password) {
    // Znajdź użytkownika
    const user = await userRepository.findByEmail(email);
    if (!user) {
      throw new Error('Nieprawidłowe dane logowania');
    }

    // Sprawdź hasło
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      throw new Error('Nieprawidłowe dane logowania');
    }

    // Pobierz organizacje użytkownika
    const organizations = await organizationRepository.getUserOrganizations(user.id);

    // Generuj token JWT
    const token = this.generateToken(user.id);

    // Usuń hasło z danych użytkownika przed zwróceniem
    const { password: _, ...userWithoutPassword } = user;

    return {
      user: userWithoutPassword,
      organizations,
      token
    };
  }

  generateToken(userId) {
    return jwt.sign(
      { id: userId },
      process.env.JWT_SECRET,
      { expiresIn: process.env.JWT_EXPIRES_IN }
    );
  }

  async getUserProfile(userId) {
    const user = await userRepository.findById(userId);
    if (!user) {
      throw new Error('Użytkownik nie znaleziony');
    }

    // Pobierz organizacje użytkownika
    const organizations = await organizationRepository.getUserOrganizations(userId);

    return {
      user,
      organizations
    };
  }
}

module.exports = new AuthService();

===== services/bullService.js =====
const bullRepository = require('../repositories/bullRepository');

class BullService {
  async getBull(bullId) {
    const bull = await bullRepository.findById(bullId);
    if (!bull) {
      throw new Error('Byk nie znaleziony');
    }
    return bull;
  }

  async getAllBulls(page = 1, limit = 10, searchTerm = '') {
    const offset = (page - 1) * limit;
    
    const bulls = await bullRepository.findAll(limit, offset, searchTerm);
    const totalCount = await bullRepository.count(searchTerm);
    
    return {
      bulls,
      pagination: {
        page,
        limit,
        totalCount,
        totalPages: Math.ceil(totalCount / limit)
      }
    };
  }

  async createBull(bullData) {
    return await bullRepository.create(bullData);
  }

  async updateBull(bullId, bullData) {
    const bull = await bullRepository.findById(bullId);
    if (!bull) {
      throw new Error('Byk nie znaleziony');
    }
    
    return await bullRepository.update(bullId, bullData);
  }

  async deleteBull(bullId) {
    const bull = await bullRepository.findById(bullId);
    if (!bull) {
      throw new Error('Byk nie znaleziony');
    }
    
    await bullRepository.delete(bullId);
    return { success: true, message: 'Byk został usunięty' };
  }
}

module.exports = new BullService();

===== services/inseminationService.js =====
const inseminationRepository = require('../repositories/inseminationRepository');
const animalRepository = require('../repositories/animalRepository');
const bullRepository = require('../repositories/bullRepository');

class InseminationService {
  async getInsemination(inseminationId) {
    const insemination = await inseminationRepository.findById(inseminationId);
    if (!insemination) {
      throw new Error('Inseminacja nie znaleziona');
    }
    return insemination;
  }

  async getAnimalInseminations(animalId, page = 1, limit = 10) {
    // Sprawdź czy zwierzę istnieje
    const animal = await animalRepository.findById(animalId);
    if (!animal) {
      throw new Error('Zwierzę nie znalezione');
    }
    
    const offset = (page - 1) * limit;
    const inseminations = await inseminationRepository.findByAnimalId(animalId, limit, offset);
    
    return {
      animal,
      inseminations
    };
  }

  async getOwnerInseminations(ownerId, page = 1, limit = 10, filters = {}) {
    const offset = (page - 1) * limit;
    
    const inseminations = await inseminationRepository.findByOwnerId(ownerId, limit, offset, filters);
    const totalCount = await inseminationRepository.countByOwnerId(ownerId, filters);
    
    return {
      inseminations,
      pagination: {
        page,
        limit,
        totalCount,
        totalPages: Math.ceil(totalCount / limit)
      }
    };
  }

  async createInsemination(inseminationData) {
    // Sprawdź czy zwierzę istnieje
    const animal = await animalRepository.findById(inseminationData.animal_id);
    if (!animal) {
      throw new Error('Zwierzę nie znalezione');
    }
    
    // Sprawdź czy byk istnieje, jeśli podano
    if (inseminationData.bull_id) {
      const bull = await bullRepository.findById(inseminationData.bull_id);
      if (!bull) {
        throw new Error('Byk nie znaleziony');
      }
    }
    
    return await inseminationRepository.create(inseminationData);
  }

  async updateInsemination(inseminationId, inseminationData) {
    // Sprawdź czy inseminacja istnieje
    const insemination = await inseminationRepository.findById(inseminationId);
    if (!insemination) {
      throw new Error('Inseminacja nie znaleziona');
    }
    
    // Sprawdź czy byk istnieje, jeśli podano
    if (inseminationData.bull_id) {
      const bull = await bullRepository.findById(inseminationData.bull_id);
      if (!bull) {
        throw new Error('Byk nie znaleziony');
      }
    }
    
    return await inseminationRepository.update(inseminationId, inseminationData);
  }

  async deleteInsemination(inseminationId) {
    const insemination = await inseminationRepository.findById(inseminationId);
    if (!insemination) {
      throw new Error('Inseminacja nie znaleziona');
    }
    
    await inseminationRepository.delete(inseminationId);
    return { success: true, message: 'Inseminacja została usunięta' };
  }
}

module.exports = new InseminationService();

===== services/keyService.js =====
const keyRepository = require('../repositories/keyRepository');

class KeyService {
  async getUserKey(userId) {
    const key = await keyRepository.findByUserId(userId);
    if (!key) {
      return null;
    }
    return key;
  }

  async createOrUpdateUserKey(userId, keyData) {
    const existingKey = await keyRepository.findByUserId(userId);
    
    if (existingKey) {
      return await keyRepository.update(userId, keyData);
    } else {
      keyData.user_id = userId;
      return await keyRepository.create(keyData);
    }
  }
}

module.exports = new KeyService();

===== services/organizationService.js =====
const organizationRepository = require('../repositories/organizationRepository');

class OrganizationService {
  async getOrganization(organizationId) {
    const organization = await organizationRepository.findById(organizationId);
    if (!organization) {
      throw new Error('Organizacja nie znaleziona');
    }
    return organization;
  }

  async createOrganization(organizationData, userId) {
    // Utwórz organizację
    const newOrganization = await organizationRepository.create(organizationData);
    
    // Przypisz użytkownika jako administratora
    await organizationRepository.addUserToOrganization(newOrganization.id, userId, 'admin');
    
    return newOrganization;
  }

  async addUserToOrganization(organizationId, userId, role = 'member') {
    // Sprawdź czy organizacja istnieje
    const organization = await organizationRepository.findById(organizationId);
    if (!organization) {
      throw new Error('Organizacja nie znaleziona');
    }
    
    // Dodaj użytkownika do organizacji
    return await organizationRepository.addUserToOrganization(organizationId, userId, role);
  }

  async getUserOrganizations(userId) {
    return await organizationRepository.getUserOrganizations(userId);
  }

  async checkUserPermission(organizationId, userId, requiredRole = null) {
    const userRole = await organizationRepository.getUserRole(organizationId, userId);
    
    if (!userRole) {
      return false;
    }
    
    if (requiredRole && userRole !== requiredRole && userRole !== 'admin') {
      return false;
    }
    
    return true;
  }
}

module.exports = new OrganizationService();

===== services/userService.js =====
const userRepository = require('../repositories/userRepository');
const organizationRepository = require('../repositories/organizationRepository');
const bcrypt = require('bcryptjs');

class UserService {
  async getUserProfile(userId) {
    const user = await userRepository.findById(userId);
    if (!user) {
      throw new Error('Użytkownik nie znaleziony');
    }

    // Pobierz organizacje użytkownika
    const organizations = await organizationRepository.getUserOrganizations(userId);

    return {
      user,
      organizations
    };
  }

  async updateUserProfile(userId, userData) {
    // Sprawdź, czy użytkownik istnieje
    const user = await userRepository.findById(userId);
    if (!user) {
      throw new Error('Użytkownik nie znaleziony');
    }

    // Aktualizuj dane użytkownika
    const updatedUser = await userRepository.update(userId, userData);
    return updatedUser;
  }

  async changePassword(userId, currentPassword, newPassword) {
    // Pobierz użytkownika z hasłem
    const user = await userRepository.findByEmail(userId);
    if (!user) {
      throw new Error('Użytkownik nie znaleziony');
    }

    // Sprawdź, czy obecne hasło jest poprawne
    const isPasswordValid = await bcrypt.compare(currentPassword, user.password);
    if (!isPasswordValid) {
      throw new Error('Aktualne hasło jest nieprawidłowe');
    }

    // Hashuj nowe hasło
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(newPassword, salt);

    // Aktualizuj hasło w bazie danych
    // Tę metodę trzeba by było dodać do repozytorium
    // W tym przykładzie nie implementujemy pełnej zmiany hasła
    // Możesz rozszerzyć userRepository o metodę updatePassword

    return { success: true, message: 'Hasło zostało zmienione' };
  }
}

module.exports = new UserService();

===== services/visitService.js =====
const visitRepository = require('../repositories/visitRepository');
const userRepository = require('../repositories/userRepository');

class VisitService {
  async getVisit(visitId) {
    const visit = await visitRepository.findById(visitId);
    if (!visit) {
      throw new Error('Wizyta nie znaleziona');
    }
    return visit;
  }

  async getFarmerVisits(farmerId, page = 1, limit = 10) {
    // Sprawdź czy rolnik istnieje
    const farmer = await userRepository.findById(farmerId);
    if (!farmer) {
      throw new Error('Użytkownik nie znaleziony');
    }
    
    const offset = (page - 1) * limit;
    const visits = await visitRepository.findByFarmerId(farmerId, limit, offset);
    const totalCount = await visitRepository.countByFarmerId(farmerId);
    
    return {
      visits,
      pagination: {
        page,
        limit,
        totalCount,
        totalPages: Math.ceil(totalCount / limit)
      }
    };
  }

  async getVetVisits(vetId, page = 1, limit = 10) {
    // Sprawdź czy weterynarz istnieje
    const vet = await userRepository.findById(vetId);
    if (!vet) {
      throw new Error('Użytkownik nie znaleziony');
    }
    
    const offset = (page - 1) * limit;
    const visits = await visitRepository.findByVetId(vetId, limit, offset);
    const totalCount = await visitRepository.countByVetId(vetId);
    
    return {
      visits,
      pagination: {
        page,
        limit,
        totalCount,
        totalPages: Math.ceil(totalCount / limit)
      }
    };
  }

  async createVisit(visitData) {
    // Sprawdzamy czy rolnik istnieje
    const farmer = await userRepository.findById(visitData.farmer_id);
    if (!farmer) {
      throw new Error('Rolnik nie znaleziony');
    }
    
    // Sprawdzamy czy weterynarz istnieje, jeśli podano
    if (visitData.vet_id) {
      const vet = await userRepository.findById(visitData.vet_id);
      if (!vet) {
        throw new Error('Weterynarz nie znaleziony');
      }
    }
    
    // Sprawdzamy czy pracownik istnieje, jeśli podano
    if (visitData.employee_id) {
      const employee = await userRepository.findById(visitData.employee_id);
      if (!employee) {
        throw new Error('Pracownik nie znaleziony');
      }
    }
    
    return await visitRepository.create(visitData);
  }

  async updateVisit(visitId, visitData) {
    // Sprawdź czy wizyta istnieje
    const visit = await visitRepository.findById(visitId);
    if (!visit) {
      throw new Error('Wizyta nie znaleziona');
    }
    
    // Sprawdzamy czy weterynarz istnieje, jeśli podano
    if (visitData.vet_id) {
      const vet = await userRepository.findById(visitData.vet_id);
      if (!vet) {
        throw new Error('Weterynarz nie znaleziony');
      }
    }
    
    // Sprawdzamy czy pracownik istnieje, jeśli podano
    if (visitData.employee_id) {
      const employee = await userRepository.findById(visitData.employee_id);
      if (!employee) {
        throw new Error('Pracownik nie znaleziony');
      }
    }
    
    return await visitRepository.update(visitId, visitData);
  }

  async deleteVisit(visitId) {
    const visit = await visitRepository.findById(visitId);
    if (!visit) {
      throw new Error('Wizyta nie znaleziona');
    }
    
    await visitRepository.delete(visitId);
    return { success: true, message: 'Wizyta została usunięta' };
  }
}

module.exports = new VisitService();

